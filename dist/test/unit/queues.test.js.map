{
  "version": 3,
  "sources": ["../../../test/unit/queues.test.ts"],
  "sourcesContent": ["import { merge } from \"lodash\";\nimport * as sinon from \"sinon\";\nimport type { DeleteMessageBatchResult, ReceiveMessageResult, SendMessageBatchResult } from \"aws-sdk/clients/sqs\";\nimport * as CloudFormationHelpers from \"../../src/CloudFormation\";\nimport { pluginConfigExt, runServerless } from \"../utils/runServerless\";\nimport { mockAws } from \"../utils/mockAws\";\nimport ServerlessError from \"../../src/utils/error\";\n\ndescribe(\"queues\", () => {\n    afterEach(() => {\n        sinon.restore();\n    });\n\n    it(\"should create all required resources\", async () => {\n        const {\n            cfTemplate,\n            computeLogicalId,\n            serverless: { version },\n        } = await runServerless({\n            fixture: \"queues\",\n            configExt: pluginConfigExt,\n            command: \"package\",\n        });\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            // Lambda worker\n            \"EmailsWorkerLogGroup\",\n            \"IamRoleLambdaExecution\",\n            \"EmailsWorkerLambdaFunction\",\n            // Lambda subscription to SQS\n            \"EmailsWorkerEventSourceMappingSQSEmailsQueueF057328A\",\n            // Queues\n            \"emailsDlq47F8494C\",\n            \"emailsQueueF057328A\",\n        ]);\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")]).toMatchObject({\n            DeletionPolicy: \"Delete\",\n            Properties: {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                QueueName: expect.stringMatching(/test-queues-\\w+-dev-emails/),\n                RedrivePolicy: {\n                    deadLetterTargetArn: {\n                        \"Fn::GetAtt\": [computeLogicalId(\"emails\", \"Dlq\"), \"Arn\"],\n                    },\n                    maxReceiveCount: 3,\n                },\n                VisibilityTimeout: 36,\n            },\n            Type: \"AWS::SQS::Queue\",\n            UpdateReplacePolicy: \"Delete\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Dlq\")]).toMatchObject({\n            DeletionPolicy: \"Delete\",\n            Properties: {\n                MessageRetentionPeriod: 1209600,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                QueueName: expect.stringMatching(/test-queues-\\w+-dev-emails-dlq/),\n            },\n            Type: \"AWS::SQS::Queue\",\n            UpdateReplacePolicy: \"Delete\",\n        });\n        expect(cfTemplate.Resources.EmailsWorkerLambdaFunction).toMatchObject({\n            DependsOn: [\"EmailsWorkerLogGroup\"],\n            Properties: {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                FunctionName: expect.stringMatching(/test-queues-\\w+-dev-emailsWorker/),\n                Handler: \"worker.handler\",\n                MemorySize: 1024,\n                Role: {\n                    \"Fn::GetAtt\": [\"IamRoleLambdaExecution\", \"Arn\"],\n                },\n                // nodejs14 on v3, nodejs12 on v2\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                Runtime: expect.stringContaining(\"nodejs\"),\n                Timeout: 6,\n            },\n            Type: \"AWS::Lambda::Function\",\n        });\n        expect(cfTemplate.Resources.EmailsWorkerEventSourceMappingSQSEmailsQueueF057328A).toEqual({\n            DependsOn: [\"IamRoleLambdaExecution\"],\n            Properties: {\n                BatchSize: 1,\n                Enabled: true,\n                EventSourceArn: {\n                    \"Fn::GetAtt\": [computeLogicalId(\"emails\", \"Queue\"), \"Arn\"],\n                },\n                FunctionName: {\n                    \"Fn::GetAtt\": [\"EmailsWorkerLambdaFunction\", \"Arn\"],\n                },\n                MaximumBatchingWindowInSeconds: 0,\n                FunctionResponseTypes: (version as string) >= \"2.67.0\" ? [\"ReportBatchItemFailures\"] : undefined,\n            },\n            Type: \"AWS::Lambda::EventSourceMapping\",\n        });\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"emails\", \"QueueArn\")]: {\n                Description: 'ARN of the \"emails\" SQS queue.',\n                Value: {\n                    \"Fn::GetAtt\": [computeLogicalId(\"emails\", \"Queue\"), \"Arn\"],\n                },\n            },\n            [computeLogicalId(\"emails\", \"QueueUrl\")]: {\n                Description: 'URL of the \"emails\" SQS queue.',\n                Value: {\n                    Ref: computeLogicalId(\"emails\", \"Queue\"),\n                },\n            },\n        });\n        // Lambda functions of the app are authorized to publish to SQS\n        expect(cfTemplate.Resources.IamRoleLambdaExecution).toMatchObject({\n            Type: \"AWS::IAM::Role\",\n            Properties: {\n                Policies: [\n                    {\n                        PolicyDocument: {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            Statement: expect.arrayContaining([\n                                {\n                                    Action: \"sqs:SendMessage\",\n                                    Effect: \"Allow\",\n                                    Resource: [\n                                        {\n                                            \"Fn::GetAtt\": [computeLogicalId(\"emails\", \"Queue\"), \"Arn\"],\n                                        },\n                                    ],\n                                },\n                            ]),\n                        },\n                    },\n                ],\n            },\n        });\n    });\n\n    it(\"sets the SQS visibility timeout to 6 times the function timeout + max batching window in seconds\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        worker: {\n                            timeout: 7,\n                        },\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")]).toMatchObject({\n            Properties: {\n                VisibilityTimeout: 7 * 6,\n            },\n        });\n        expect(cfTemplate.Resources.EmailsWorkerLambdaFunction).toMatchObject({\n            Properties: {\n                Timeout: 7,\n            },\n        });\n    });\n\n    it(\"sets the SQS visibility timeout to 6 times the function timeout + max batching window in seconds when using custom maxBatchingWindow\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        maxBatchingWindow: 5,\n                        worker: {\n                            timeout: 7,\n                        },\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")]).toMatchObject({\n            Properties: {\n                VisibilityTimeout: 7 * 6 + 5, // NOTE: 5 is the maxBatchingWindow\n            },\n        });\n        expect(cfTemplate.Resources.EmailsWorkerLambdaFunction).toMatchObject({\n            Properties: {\n                Timeout: 7,\n            },\n        });\n    });\n\n    it(\"allows changing the number of retries\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        maxRetries: 1,\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")]).toMatchObject({\n            Properties: {\n                RedrivePolicy: {\n                    maxReceiveCount: 1,\n                },\n            },\n        });\n    });\n\n    it(\"allows changing the batch size\", async () => {\n        const { cfTemplate } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        batchSize: 10,\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources.EmailsWorkerEventSourceMappingSQSEmailsQueueF057328A).toMatchObject({\n            Properties: {\n                BatchSize: 10,\n            },\n        });\n    });\n\n    it(\"allows changing the delivery delay\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        delay: 10,\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")]).toMatchObject({\n            Properties: {\n                DelaySeconds: 10,\n            },\n        });\n    });\n\n    it(\"allows changing the encryption to kmsManaged\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        encryption: \"kmsManaged\",\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")]).toMatchObject({\n            Properties: {\n                KmsMasterKeyId: \"alias/aws/sqs\",\n            },\n        });\n    });\n\n    it(\"allows changing the encryption to kms\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        encryption: \"kms\",\n                        encryptionKey: \"MyKey\",\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")]).toMatchObject({\n            Properties: {\n                KmsMasterKeyId: {\n                    \"Fn::GetAtt\": [computeLogicalId(\"emails\", \"MyKey\"), \"Arn\"],\n                },\n            },\n        });\n    });\n\n    it(\"should throw an error if encryption is 'kms' but encryptionKey is missing\", async () => {\n        expect.assertions(2);\n\n        try {\n            await runServerless({\n                fixture: \"queues\",\n                configExt: merge({}, pluginConfigExt, {\n                    constructs: {\n                        emails: {\n                            encryption: \"kms\",\n                        },\n                    },\n                }),\n                command: \"package\",\n            });\n        } catch (error) {\n            expect(error).toBeInstanceOf(ServerlessError);\n            expect(error).toHaveProperty(\n                \"message\",\n                \"Invalid configuration in 'constructs.emails': 'encryptionKey' must be set if the 'encryption' is set to 'kms'\"\n            );\n        }\n    });\n\n    it(\"should throw an error if the delay is invalid\", async () => {\n        expect.assertions(2);\n\n        try {\n            await runServerless({\n                fixture: \"queues\",\n                configExt: merge({}, pluginConfigExt, {\n                    constructs: {\n                        emails: {\n                            delay: 901,\n                        },\n                    },\n                }),\n                command: \"package\",\n            });\n        } catch (error) {\n            expect(error).toBeInstanceOf(ServerlessError);\n            expect(error).toHaveProperty(\n                \"message\",\n                \"Invalid configuration in 'constructs.emails': 'delay' must be between 0 and 900, '901' given.\"\n            );\n        }\n    });\n\n    it(\"allows defining a DLQ email alarm\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        alarm: \"alerting@example.com\",\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            \"EmailsWorkerLogGroup\",\n            \"IamRoleLambdaExecution\",\n            \"EmailsWorkerLambdaFunction\",\n            \"EmailsWorkerEventSourceMappingSQSEmailsQueueF057328A\",\n            \"emailsDlq47F8494C\",\n            \"emailsQueueF057328A\",\n            // Alarm\n            \"emailsAlarmTopic594BAEC9\",\n            \"emailsAlarmTopicSubscription688AECB6\",\n            \"emailsAlarm1821C14F\",\n        ]);\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Alarm\")]).toMatchObject({\n            Properties: {\n                AlarmActions: [\n                    {\n                        Ref: computeLogicalId(\"emails\", \"AlarmTopic\"),\n                    },\n                ],\n                AlarmDescription: \"Alert triggered when there are failed jobs in the dead letter queue.\",\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                AlarmName: expect.stringMatching(/test-queues-\\w+-dev-emails-dlq-alarm/),\n                ComparisonOperator: \"GreaterThanThreshold\",\n                Dimensions: [\n                    {\n                        Name: \"QueueName\",\n                        Value: {\n                            \"Fn::GetAtt\": [computeLogicalId(\"emails\", \"Dlq\"), \"QueueName\"],\n                        },\n                    },\n                ],\n                EvaluationPeriods: 1,\n                MetricName: \"ApproximateNumberOfMessagesVisible\",\n                Namespace: \"AWS/SQS\",\n                Period: 60,\n                Statistic: \"Sum\",\n                Threshold: 0,\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"AlarmTopic\")]).toMatchObject({\n            Properties: {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                TopicName: expect.stringMatching(/test-queues-\\w+-dev-emails-dlq-alarm-topic/),\n                DisplayName: \"[Alert][emails] There are failed jobs in the dead letter queue.\",\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"AlarmTopicSubscription\")]).toMatchObject({\n            Properties: {\n                Endpoint: \"alerting@example.com\",\n                Protocol: \"email\",\n                TopicArn: {\n                    Ref: computeLogicalId(\"emails\", \"AlarmTopic\"),\n                },\n            },\n        });\n    });\n\n    it(\"should purge messages from the DLQ\", async () => {\n        const awsMock = mockAws();\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").resolves(\"queue-url\");\n        const purgeSpy = awsMock.mockService(\"SQS\", \"purgeQueue\");\n\n        await runServerless({\n            fixture: \"queues\",\n            configExt: pluginConfigExt,\n            command: \"emails:failed:purge\",\n        });\n\n        expect(purgeSpy.firstCall.firstArg).toStrictEqual({\n            QueueUrl: \"queue-url\",\n        });\n    });\n\n    it(\"should not do anything if there are no failed messages to retry\", async () => {\n        const awsMock = mockAws();\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").resolves(\"queue-url\");\n        awsMock.mockService(\"SQS\", \"receiveMessage\").resolves({\n            Messages: [],\n        });\n        const sendSpy = awsMock.mockService(\"SQS\", \"sendMessageBatch\");\n        const deleteSpy = awsMock.mockService(\"SQS\", \"deleteMessageBatch\");\n\n        await runServerless({\n            fixture: \"queues\",\n            configExt: pluginConfigExt,\n            command: \"emails:failed:retry\",\n        });\n\n        expect(sendSpy.callCount).toBe(0);\n        expect(deleteSpy.callCount).toBe(0);\n    });\n\n    it(\"should retry messages from the DLQ\", async () => {\n        const awsMock = mockAws();\n        const stackOutputStub = sinon.stub(CloudFormationHelpers, \"getStackOutput\");\n        stackOutputStub.onFirstCall().resolves(\"queue-url\");\n        stackOutputStub.onSecondCall().resolves(\"dlq-url\");\n        const receiveStub = awsMock.mockService(\"SQS\", \"receiveMessage\");\n        // First call: 1 message is found\n        const sqsResponse: ReceiveMessageResult = {\n            Messages: [\n                {\n                    MessageId: \"abcd\",\n                    Body: \"sample body\",\n                    ReceiptHandle: \"abcd-handle\",\n                    Attributes: {},\n                    MessageAttributes: {},\n                },\n            ],\n        };\n        receiveStub.onFirstCall().resolves(sqsResponse);\n        // On next calls: no messages found\n        receiveStub.resolves({\n            Messages: [],\n        });\n        const sendResult: SendMessageBatchResult = {\n            Successful: [\n                {\n                    Id: \"abcd\",\n                    MessageId: \"abcd\",\n                    MD5OfMessageBody: \"\",\n                },\n            ],\n            Failed: [],\n        };\n        const sendSpy = awsMock.mockService(\"SQS\", \"sendMessageBatch\").resolves(sendResult);\n        const deleteResult: DeleteMessageBatchResult = {\n            Successful: [\n                {\n                    Id: \"abcd\",\n                },\n            ],\n            Failed: [],\n        };\n        const deleteSpy = awsMock.mockService(\"SQS\", \"deleteMessageBatch\").resolves(deleteResult);\n\n        await runServerless({\n            fixture: \"queues\",\n            configExt: pluginConfigExt,\n            command: \"emails:failed:retry\",\n        });\n\n        // The failed message should have been \"sent\" to the main queue\n        expect(sendSpy.callCount).toBe(1);\n        expect(sendSpy.firstCall.firstArg).toStrictEqual({\n            QueueUrl: \"queue-url\",\n            Entries: [\n                {\n                    Id: \"abcd\",\n                    MessageBody: \"sample body\",\n                    MessageAttributes: {},\n                },\n            ],\n        });\n        // The failed message should have been \"deleted\" from the dead letter queue\n        expect(deleteSpy.callCount).toBe(1);\n        expect(deleteSpy.firstCall.firstArg).toStrictEqual({\n            QueueUrl: \"dlq-url\",\n            Entries: [\n                {\n                    Id: \"abcd\",\n                    ReceiptHandle: \"abcd-handle\",\n                },\n            ],\n        });\n    });\n\n    it(\"should send a message to the queue\", async () => {\n        const awsMock = mockAws();\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").resolves(\"queue-url\");\n        const sendSpy = awsMock.mockService(\"SQS\", \"sendMessage\").resolves();\n\n        await runServerless({\n            fixture: \"queues\",\n            configExt: pluginConfigExt,\n            command: \"emails:send\",\n            options: {\n                body: \"Message body\",\n            },\n        });\n\n        expect(sendSpy.callCount).toBe(1);\n        expect(sendSpy.firstCall.firstArg).toStrictEqual({\n            QueueUrl: \"queue-url\",\n            MessageBody: \"Message body\",\n        });\n    });\n\n    it(\"should create FIFO queues\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        fifo: true,\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")].Properties).toMatchObject({\n            ContentBasedDeduplication: true,\n            FifoQueue: true,\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Dlq\")].Properties).toMatchObject({\n            FifoQueue: true,\n        });\n        // The DLQ is meant to store failed messages. We probably don't want similar messages to be dropped automatically.\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Dlq\")].Properties).not.toHaveProperty(\n            \"ContentBasedDeduplication\"\n        );\n    });\n\n    it(\"should send a message to a fifo queue\", async () => {\n        const awsMock = mockAws();\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").resolves(\"queue-url\");\n        const sendSpy = awsMock.mockService(\"SQS\", \"sendMessage\").resolves();\n\n        await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        fifo: true,\n                    },\n                },\n            }),\n            command: \"emails:send\",\n            options: {\n                body: \"Message body\",\n                \"group-id\": \"123\",\n            },\n        });\n\n        expect(sendSpy.callCount).toBe(1);\n        expect(sendSpy.firstCall.firstArg).toStrictEqual({\n            QueueUrl: \"queue-url\",\n            MessageGroupId: \"123\",\n            MessageBody: \"Message body\",\n        });\n    });\n\n    it(\"allows overriding queue properties\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"queues\",\n            configExt: merge({}, pluginConfigExt, {\n                constructs: {\n                    emails: {\n                        extensions: {\n                            queue: {\n                                Properties: {\n                                    MaximumMessageSize: 1024,\n                                },\n                            },\n                            dlq: {\n                                Properties: {\n                                    MaximumMessageSize: 1024,\n                                },\n                            },\n                        },\n                    },\n                },\n            }),\n            command: \"package\",\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Queue\")].Properties).toMatchObject({\n            MaximumMessageSize: 1024,\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"emails\", \"Dlq\")].Properties).toMatchObject({\n            MaximumMessageSize: 1024,\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
