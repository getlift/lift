{
  "version": 3,
  "sources": ["../../../test/unit/vpc.test.ts"],
  "sourcesContent": ["import { cloneDeep, get, merge } from \"lodash\";\nimport type { AwsCfInstruction } from \"@serverless/typescript\";\nimport { baseConfig, pluginConfigExt, runServerless } from \"../utils/runServerless\";\nimport ServerlessError from \"../../src/utils/error\";\n\ndescribe(\"vpc\", () => {\n    it(\"should put Lambda functions in the VPC\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"vpc\",\n            configExt: pluginConfigExt,\n            command: \"package\",\n        });\n\n        const vpcConfig = get(cfTemplate.Resources.FooLambdaFunction, \"Properties.VpcConfig\") as Record<\n            string,\n            unknown\n        >;\n        expect(vpcConfig).toHaveProperty(\"SecurityGroupIds\");\n        expect((vpcConfig.SecurityGroupIds as AwsCfInstruction[])[0]).toMatchObject({\n            \"Fn::GetAtt\": [computeLogicalId(\"vpc\", \"AppSecurityGroup\"), \"GroupId\"],\n        });\n        expect(vpcConfig).toHaveProperty(\"SubnetIds\");\n        expect(vpcConfig.SubnetIds).toContainEqual({\n            Ref: computeLogicalId(\"vpc\", \"PrivateSubnet1\", \"Subnet\"),\n        });\n        expect(vpcConfig.SubnetIds).toContainEqual({\n            Ref: computeLogicalId(\"vpc\", \"PrivateSubnet2\", \"Subnet\"),\n        });\n    });\n    it(\"throws an error when using the construct twice\", async () => {\n        expect.assertions(2);\n\n        try {\n            await runServerless({\n                config: merge({}, baseConfig, {\n                    constructs: {\n                        vpc1: {\n                            type: \"vpc\",\n                        },\n                        vpc2: {\n                            type: \"vpc\",\n                        },\n                    },\n                }),\n                command: \"package\",\n            });\n        } catch (error) {\n            expect(error).toBeInstanceOf(ServerlessError);\n            expect(error).toHaveProperty(\"code\", \"LIFT_ONLY_ONE_VPC\");\n        }\n    });\n    it(\"throws an error when there is an existing VPC config\", async () => {\n        expect.assertions(2);\n\n        try {\n            await runServerless({\n                fixture: \"vpc\",\n                configExt: merge({}, pluginConfigExt, {\n                    provider: {\n                        name: \"aws\",\n                        vpc: {\n                            securityGroupIds: [\"sg-00000000000000000\"],\n                            subnetIds: [\"subnet-01234567899999999\", \"subnet-00000000099999999\"],\n                        },\n                    },\n                }),\n                command: \"package\",\n            });\n        } catch (error) {\n            expect(error).toBeInstanceOf(ServerlessError);\n            expect(error).toHaveProperty(\"code\", \"LIFT_ONLY_ONE_VPC\");\n        }\n    });\n    it(\"should create all required resources\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"vpc\",\n            configExt: cloneDeep(pluginConfigExt),\n            command: \"package\",\n        });\n\n        const vpcId = computeLogicalId(\"vpc\");\n        const securityGroupId = computeLogicalId(\"vpc\", \"AppSecurityGroup\");\n\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            \"FooLogGroup\",\n            \"IamRoleLambdaExecution\",\n            \"FooLambdaFunction\",\n\n            // VPC\n            vpcId,\n\n            // Public Subnet 1\n            computeLogicalId(\"vpc\", \"PublicSubnet1\", \"Subnet\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet1\", \"RouteTable\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet1\", \"RouteTableAssociation\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet1\", \"DefaultRoute\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet1\", \"EIP\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet1\", \"NATGateway\"),\n\n            // Public Subnet 2\n            computeLogicalId(\"vpc\", \"PublicSubnet2\", \"Subnet\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet2\", \"RouteTable\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet2\", \"RouteTableAssociation\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet2\", \"DefaultRoute\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet2\", \"EIP\"),\n            computeLogicalId(\"vpc\", \"PublicSubnet2\", \"NATGateway\"),\n\n            // Private Subnet 1\n            computeLogicalId(\"vpc\", \"PrivateSubnet1\", \"Subnet\"),\n            computeLogicalId(\"vpc\", \"PrivateSubnet1\", \"RouteTable\"),\n            computeLogicalId(\"vpc\", \"PrivateSubnet1\", \"RouteTableAssociation\"),\n            computeLogicalId(\"vpc\", \"PrivateSubnet1\", \"DefaultRoute\"),\n\n            // Private Subnet 2\n            computeLogicalId(\"vpc\", \"PrivateSubnet2\", \"Subnet\"),\n            computeLogicalId(\"vpc\", \"PrivateSubnet2\", \"RouteTable\"),\n            computeLogicalId(\"vpc\", \"PrivateSubnet2\", \"RouteTableAssociation\"),\n            computeLogicalId(\"vpc\", \"PrivateSubnet2\", \"DefaultRoute\"),\n\n            // Internet Gateway\n            computeLogicalId(\"vpc\", \"IGW\"),\n            computeLogicalId(\"vpc\", \"VPCGW\"),\n\n            // Security Group\n            securityGroupId,\n        ]);\n\n        expect(cfTemplate.Resources[vpcId]).toStrictEqual({\n            Type: \"AWS::EC2::VPC\",\n            Properties: {\n                CidrBlock: \"10.0.0.0/16\",\n                EnableDnsHostnames: true,\n                EnableDnsSupport: true,\n                InstanceTenancy: \"default\",\n                Tags: [{ Key: \"Name\", Value: \"Default/vpc\" }],\n            },\n        });\n\n        expect(cfTemplate.Resources[computeLogicalId(\"vpc\", \"PublicSubnet1\", \"Subnet\")]).toStrictEqual({\n            Type: \"AWS::EC2::Subnet\",\n            Properties: {\n                AvailabilityZone: { \"Fn::Select\": [0, { \"Fn::GetAZs\": \"\" }] },\n                CidrBlock: \"10.0.0.0/18\",\n                MapPublicIpOnLaunch: true,\n                Tags: [\n                    { Key: \"aws-cdk:subnet-name\", Value: \"Public\" },\n                    { Key: \"aws-cdk:subnet-type\", Value: \"Public\" },\n                    { Key: \"Name\", Value: \"Default/vpc/PublicSubnet1\" },\n                ],\n                VpcId: { Ref: vpcId },\n            },\n        });\n\n        expect(cfTemplate.Resources[computeLogicalId(\"vpc\", \"PublicSubnet1\", \"RouteTable\")]).toStrictEqual({\n            Type: \"AWS::EC2::RouteTable\",\n            Properties: {\n                VpcId: { Ref: vpcId },\n                Tags: [{ Key: \"Name\", Value: \"Default/vpc/PublicSubnet1\" }],\n            },\n        });\n\n        expect(cfTemplate.Resources[computeLogicalId(\"vpc\", \"PublicSubnet1\", \"NATGateway\")]).toStrictEqual({\n            Type: \"AWS::EC2::NatGateway\",\n            DependsOn: [\n                computeLogicalId(\"vpc\", \"PublicSubnet1\", \"DefaultRoute\"),\n                computeLogicalId(\"vpc\", \"PublicSubnet1\", \"RouteTableAssociation\"),\n            ],\n            Properties: {\n                AllocationId: { \"Fn::GetAtt\": [computeLogicalId(\"vpc\", \"PublicSubnet1\", \"EIP\"), \"AllocationId\"] },\n                SubnetId: { Ref: computeLogicalId(\"vpc\", \"PublicSubnet1\", \"Subnet\") },\n                Tags: [{ Key: \"Name\", Value: \"Default/vpc/PublicSubnet1\" }],\n            },\n        });\n\n        expect(cfTemplate.Resources[computeLogicalId(\"vpc\", \"PrivateSubnet1\", \"Subnet\")]).toStrictEqual({\n            Type: \"AWS::EC2::Subnet\",\n            Properties: {\n                VpcId: { Ref: vpcId },\n                AvailabilityZone: { \"Fn::Select\": [0, { \"Fn::GetAZs\": \"\" }] },\n                CidrBlock: \"10.0.128.0/18\",\n                MapPublicIpOnLaunch: false,\n                Tags: [\n                    { Key: \"aws-cdk:subnet-name\", Value: \"Private\" },\n                    { Key: \"aws-cdk:subnet-type\", Value: \"Private\" },\n                    { Key: \"Name\", Value: \"Default/vpc/PrivateSubnet1\" },\n                ],\n            },\n        });\n\n        expect(cfTemplate.Resources[securityGroupId]).toMatchObject({\n            Type: \"AWS::EC2::SecurityGroup\",\n            Properties: {\n                VpcId: { Ref: vpcId },\n                GroupDescription: \"Default/vpc/AppSecurityGroup\",\n                SecurityGroupEgress: [\n                    {\n                        CidrIp: \"0.0.0.0/0\",\n                        Description: \"Allow all outbound traffic by default\",\n                        IpProtocol: \"-1\",\n                    },\n                ],\n            },\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
