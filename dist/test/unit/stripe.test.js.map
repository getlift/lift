{
  "version": 3,
  "sources": ["../../../test/unit/stripe.test.ts"],
  "sourcesContent": ["import { resolve } from \"path\";\nimport { get } from \"lodash\";\nimport type { StripeProvider } from \"@lift/providers\";\nimport { pluginConfigExt, runServerless } from \"../utils/runServerless\";\n\ndescribe(\"stripe\", () => {\n    describe(\"when an existing STRIPE_API_KEY env is set\", () => {\n        let serverless: Record<string, unknown>;\n        beforeAll(async () => {\n            ({ serverless } = await runServerless({\n                fixture: \"stripe\",\n                configExt: pluginConfigExt,\n                command: \"package\",\n                env: {\n                    STRIPE_API_KEY: \"rk_test_key_from_env\",\n                    XDG_CONFIG_HOME: resolve(process.cwd(), \"test/fixtures/stripe/.config\"),\n                },\n            }));\n        });\n\n        test.each([\n            [\"stripeProviderWithProfile\", \"rk_test_key_from_toml_file\"],\n            [\"stripeProviderWithoutProfile\", \"rk_test_key_from_env\"],\n        ])(\"should source the correct key for provider %p\", (useCase, expectedApiKey) => {\n            // @ts-expect-error serverless object in unknown and can vary\n            const stripeProvider = serverless.getLiftProviderById(useCase) as StripeProvider;\n            const stripeApiKey = (get(stripeProvider, \"sdk._api.auth\") as string).slice(7);\n            expect(stripeApiKey).toBe(expectedApiKey);\n        });\n    });\n    it(\"should throw when no STRIPE_API_KEY env is set and one provider has no profile\", async () => {\n        await expect(\n            runServerless({\n                fixture: \"stripe\",\n                configExt: pluginConfigExt,\n                command: \"package\",\n                env: {\n                    XDG_CONFIG_HOME: resolve(process.cwd(), \"test/fixtures/stripe/.config\"),\n                },\n            })\n        ).rejects.toThrow(/There is no default profile in your stripe configuration/);\n    });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,kBAAwB;AACxB,oBAAoB;AAEpB,2BAA+C;AAE/C,SAAS,UAAU,MAAM;AACrB,WAAS,8CAA8C,MAAM;AACzD,QAAI;AACJ,cAAU,YAAY;AAClB,MAAC,GAAE,eAAe,MAAM,wCAAc;AAAA,QAClC,SAAS;AAAA,QACT,WAAW;AAAA,QACX,SAAS;AAAA,QACT,KAAK;AAAA,UACD,gBAAgB;AAAA,UAChB,iBAAiB,yBAAQ,QAAQ,OAAO;AAAA;AAAA;AAAA;AAKpD,SAAK,KAAK;AAAA,MACN,CAAC,6BAA6B;AAAA,MAC9B,CAAC,gCAAgC;AAAA,OAClC,iDAAiD,CAAC,SAAS,mBAAmB;AAE7E,YAAM,iBAAiB,WAAW,oBAAoB;AACtD,YAAM,eAAgB,uBAAI,gBAAgB,iBAA4B,MAAM;AAC5E,aAAO,cAAc,KAAK;AAAA;AAAA;AAGlC,KAAG,kFAAkF,YAAY;AAC7F,UAAM,OACF,wCAAc;AAAA,MACV,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS;AAAA,MACT,KAAK;AAAA,QACD,iBAAiB,yBAAQ,QAAQ,OAAO;AAAA;AAAA,QAGlD,QAAQ,QAAQ;AAAA;AAAA;",
  "names": []
}
