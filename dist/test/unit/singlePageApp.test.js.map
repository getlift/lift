{
  "version": 3,
  "sources": ["../../../test/unit/singlePageApp.test.ts"],
  "sourcesContent": ["import { get } from \"lodash\";\nimport * as sinon from \"sinon\";\nimport { baseConfig, runServerless } from \"../utils/runServerless\";\n\ndescribe(\"single page app\", () => {\n    afterEach(() => {\n        sinon.restore();\n    });\n\n    it(\"should define a request function that redirects nested uris to index.html\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"single-page-app\",\n                        path: \".\",\n                        domain: [\"www.example.com\", \"example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        const requestFunction = computeLogicalId(\"landing\", \"RequestFunction\");\n        const responseFunction = computeLogicalId(\"landing\", \"ResponseFunction\");\n        expect(cfTemplate.Resources[requestFunction]).toMatchInlineSnapshot(`\n            Object {\n              \"Properties\": Object {\n                \"AutoPublish\": true,\n                \"FunctionCode\": \"var REDIRECT_REGEX = /^[^.]+$|\\\\\\\\.(?!(css|gif|ico|jpg|jpeg|js|png|txt|svg|woff|woff2|ttf|map|json|xml|pdf)$)([^.]+$)/;\n\n            function handler(event) {\n                var uri = event.request.uri;\n                var request = event.request;\n                var isUriToRedirect = REDIRECT_REGEX.test(uri);\n\n                if (isUriToRedirect) {\n                    request.uri = \\\\\"/index.html\\\\\";\n                }\n\n                return event.request;\n            }\",\n                \"FunctionConfig\": Object {\n                  \"Comment\": \"app-dev-us-east-1-landing-request\",\n                  \"Runtime\": \"cloudfront-js-1.0\",\n                },\n                \"Name\": \"app-dev-us-east-1-landing-request\",\n              },\n              \"Type\": \"AWS::CloudFront::Function\",\n            }\n        `);\n\n        expect(\n            get(\n                cfTemplate.Resources[cfDistributionLogicalId],\n                \"Properties.DistributionConfig.DefaultCacheBehavior.FunctionAssociations\"\n            )\n        ).toMatchInlineSnapshot(`\n            Array [\n              Object {\n                \"EventType\": \"viewer-response\",\n                \"FunctionARN\": Object {\n                  \"Fn::GetAtt\": Array [\n                    \"${responseFunction}\",\n                    \"FunctionARN\",\n                  ],\n                },\n              },\n              Object {\n                \"EventType\": \"viewer-request\",\n                \"FunctionARN\": Object {\n                  \"Fn::GetAtt\": Array [\n                    \"${requestFunction}\",\n                    \"FunctionARN\",\n                  ],\n                },\n              },\n            ]\n        `);\n    });\n\n    it(\"should allow to redirect to the main domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"single-page-app\",\n                        path: \".\",\n                        domain: [\"www.example.com\", \"example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        redirectToMainDomain: true,\n                    },\n                },\n            }),\n        });\n        const requestFunction = computeLogicalId(\"landing\", \"RequestFunction\");\n        expect(cfTemplate.Resources[requestFunction].Properties.FunctionCode).toMatchInlineSnapshot(`\n            \"var REDIRECT_REGEX = /^[^.]+$|\\\\\\\\.(?!(css|gif|ico|jpg|jpeg|js|png|txt|svg|woff|woff2|ttf|map|json|xml|pdf)$)([^.]+$)/;\n\n            function handler(event) {\n                var uri = event.request.uri;\n                var request = event.request;\n                var isUriToRedirect = REDIRECT_REGEX.test(uri);\n\n                if (isUriToRedirect) {\n                    request.uri = \\\\\"/index.html\\\\\";\n                }\n                if (request.headers[\\\\\"host\\\\\"].value !== \\\\\"www.example.com\\\\\") {\n                    return {\n                        statusCode: 301,\n                        statusDescription: \\\\\"Moved Permanently\\\\\",\n                        headers: {\n                            location: {\n                                value: \\\\\"https://www.example.com\\\\\" + request.uri\n                            }\n                        }\n                    };\n                }\n\n                return event.request;\n            }\"\n        `);\n    });\n\n    it(\"allows overriding single page app properties\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"single-page-app\",\n                        path: \".\",\n                        extensions: {\n                            distribution: {\n                                Properties: {\n                                    DistributionConfig: {\n                                        Comment: \"This is my comment\",\n                                    },\n                                },\n                            },\n                            bucket: {\n                                Properties: {\n                                    ObjectLockEnabled: true,\n                                },\n                            },\n                        },\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"landing\", \"CDN\")].Properties).toMatchObject({\n            DistributionConfig: {\n                Comment: \"This is my comment\",\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"landing\", \"Bucket\")].Properties).toMatchObject({\n            ObjectLockEnabled: true,\n        });\n    });\n\n    it(\"trims CloudFront function names to stay under the limit\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            options: {\n                stage: \"super-long-stage-name\",\n            },\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    \"suuuper-long-construct-name\": {\n                        type: \"single-page-app\",\n                        path: \".\",\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"suuuper-long-construct-name\", \"RequestFunction\")]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                Name: \"app-super-long-stage-name-us-east-1-suuuper-long-construc-f3b7e1\",\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"suuuper-long-construct-name\", \"ResponseFunction\")]).toMatchObject(\n            {\n                Type: \"AWS::CloudFront::Function\",\n                Properties: {\n                    Name: \"app-super-long-stage-name-us-east-1-suuuper-long-construc-8c1f76\",\n                },\n            }\n        );\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
