{
  "version": 3,
  "sources": ["../../../test/unit/storage.test.ts"],
  "sourcesContent": ["import { pluginConfigExt, runServerless } from \"../utils/runServerless\";\n\ndescribe(\"storage\", () => {\n    let cfTemplate: { Resources: Record<string, { Properties: Record<string, unknown> }> };\n    let computeLogicalId: (...address: string[]) => string;\n    beforeAll(async () => {\n        ({ cfTemplate, computeLogicalId } = await runServerless({\n            fixture: \"storage\",\n            configExt: pluginConfigExt,\n            command: \"package\",\n        }));\n    });\n    describe(\"common tests\", () => {\n        const useCases = [[\"default\"], [\"kmsEncryption\"]];\n        test.each(useCases)(\"%p - should configure a lifecycle policy\", (useCase) => {\n            expect(\n                cfTemplate.Resources[computeLogicalId(useCase, \"Bucket\")].Properties.LifecycleConfiguration\n            ).toMatchObject({\n                Rules: [\n                    {\n                        Status: \"Enabled\",\n                        Transitions: [\n                            {\n                                StorageClass: \"INTELLIGENT_TIERING\",\n                                TransitionInDays: 0,\n                            },\n                        ],\n                    },\n                    {\n                        NoncurrentVersionExpiration: {\n                            NoncurrentDays: 30,\n                        },\n                        Status: \"Enabled\",\n                    },\n                ],\n            });\n        });\n        test.each(useCases)(\"%p - should have versionning enabled\", (useCase) => {\n            expect(\n                cfTemplate.Resources[computeLogicalId(useCase, \"Bucket\")].Properties.VersioningConfiguration\n            ).toStrictEqual({ Status: \"Enabled\" });\n        });\n    });\n\n    test.each([\n        [\"default\", \"AES256\"],\n        [\"kmsEncryption\", \"aws:kms\"],\n    ])(\"should allow %p encryption\", (construct, expectedSSEAlgorithm) => {\n        expect(cfTemplate.Resources[computeLogicalId(construct, \"Bucket\")].Properties).toMatchObject({\n            BucketEncryption: {\n                ServerSideEncryptionConfiguration: [\n                    {\n                        ServerSideEncryptionByDefault: { SSEAlgorithm: expectedSSEAlgorithm },\n                    },\n                ],\n            },\n        });\n    });\n\n    it(\"allows overriding bucket properties\", () => {\n        expect(cfTemplate.Resources[computeLogicalId(\"extendedBucket\", \"Bucket\")].Properties).toMatchObject({\n            ObjectLockEnabled: true,\n        });\n    });\n\n    it(\"allows overriding bucket properties with array\", () => {\n        expect(cfTemplate.Resources[computeLogicalId(\"extendedBucketWithArray\", \"Bucket\")].Properties).toMatchObject({\n            CorsConfiguration: {\n                CorsRules: [\n                    {\n                        AllowedOrigins: [\"*\"],\n                        AllowedHeaders: [\"*\"],\n                        AllowedMethods: [\"GET\", \"HEAD\", \"PUT\", \"POST\"],\n                    },\n                ],\n            },\n        });\n    });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,2BAA+C;AAE/C,SAAS,WAAW,MAAM;AACtB,MAAI;AACJ,MAAI;AACJ,YAAU,YAAY;AAClB,IAAC,GAAE,YAAY,qBAAqB,MAAM,wCAAc;AAAA,MACpD,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS;AAAA;AAAA;AAGjB,WAAS,gBAAgB,MAAM;AAC3B,UAAM,WAAW,CAAC,CAAC,YAAY,CAAC;AAChC,SAAK,KAAK,UAAU,4CAA4C,CAAC,YAAY;AACzE,aACI,WAAW,UAAU,iBAAiB,SAAS,WAAW,WAAW,wBACvE,cAAc;AAAA,QACZ,OAAO;AAAA,UACH;AAAA,YACI,QAAQ;AAAA,YACR,aAAa;AAAA,cACT;AAAA,gBACI,cAAc;AAAA,gBACd,kBAAkB;AAAA;AAAA;AAAA;AAAA,UAI9B;AAAA,YACI,6BAA6B;AAAA,cACzB,gBAAgB;AAAA;AAAA,YAEpB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAKxB,SAAK,KAAK,UAAU,wCAAwC,CAAC,YAAY;AACrE,aACI,WAAW,UAAU,iBAAiB,SAAS,WAAW,WAAW,yBACvE,cAAc,EAAE,QAAQ;AAAA;AAAA;AAIlC,OAAK,KAAK;AAAA,IACN,CAAC,WAAW;AAAA,IACZ,CAAC,iBAAiB;AAAA,KACnB,8BAA8B,CAAC,WAAW,yBAAyB;AAClE,WAAO,WAAW,UAAU,iBAAiB,WAAW,WAAW,YAAY,cAAc;AAAA,MACzF,kBAAkB;AAAA,QACd,mCAAmC;AAAA,UAC/B;AAAA,YACI,+BAA+B,EAAE,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnE,KAAG,uCAAuC,MAAM;AAC5C,WAAO,WAAW,UAAU,iBAAiB,kBAAkB,WAAW,YAAY,cAAc;AAAA,MAChG,mBAAmB;AAAA;AAAA;AAI3B,KAAG,kDAAkD,MAAM;AACvD,WAAO,WAAW,UAAU,iBAAiB,2BAA2B,WAAW,YAAY,cAAc;AAAA,MACzG,mBAAmB;AAAA,QACf,WAAW;AAAA,UACP;AAAA,YACI,gBAAgB,CAAC;AAAA,YACjB,gBAAgB,CAAC;AAAA,YACjB,gBAAgB,CAAC,OAAO,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
