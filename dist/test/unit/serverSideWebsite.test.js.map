{
  "version": 3,
  "sources": ["../../../test/unit/serverSideWebsite.test.ts"],
  "sourcesContent": ["import * as sinon from \"sinon\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { baseConfig, pluginConfigExt, runServerless } from \"../utils/runServerless\";\nimport * as CloudFormationHelpers from \"../../src/CloudFormation\";\nimport { computeS3ETag } from \"../../src/utils/s3-sync\";\nimport { mockAws } from \"../utils/mockAws\";\n\ndescribe(\"server-side website\", () => {\n    afterEach(() => {\n        sinon.restore();\n    });\n\n    it(\"should create all required resources\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        assets: {\n                            \"/assets/*\": \"public\",\n                        },\n                    },\n                },\n            }),\n        });\n        const bucketLogicalId = computeLogicalId(\"backend\", \"Assets\");\n        const bucketPolicyLogicalId = computeLogicalId(\"backend\", \"Assets\", \"Policy\");\n        const originAccessIdentityLogicalId = computeLogicalId(\"backend\", \"CDN\", \"Origin2\", \"S3Origin\");\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        const cfOriginId1 = computeLogicalId(\"backend\", \"CDN\", \"Origin1\");\n        const cfOriginId2 = computeLogicalId(\"backend\", \"CDN\", \"Origin2\");\n        const originPolicyId = computeLogicalId(\"backend\", \"BackendOriginPolicy\");\n        const cachePolicyId = computeLogicalId(\"backend\", \"BackendCachePolicy\");\n        const requestFunction = computeLogicalId(\"backend\", \"RequestFunction\");\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            bucketLogicalId,\n            bucketPolicyLogicalId,\n            originPolicyId,\n            cachePolicyId,\n            requestFunction,\n            originAccessIdentityLogicalId,\n            cfDistributionLogicalId,\n        ]);\n        expect(cfTemplate.Resources[bucketLogicalId]).toMatchObject({\n            Type: \"AWS::S3::Bucket\",\n            UpdateReplacePolicy: \"Delete\",\n            DeletionPolicy: \"Delete\",\n        });\n        expect(cfTemplate.Resources[bucketPolicyLogicalId]).toMatchObject({\n            Properties: {\n                Bucket: { Ref: bucketLogicalId },\n                PolicyDocument: {\n                    Statement: [\n                        {\n                            Action: \"s3:GetObject\",\n                            Effect: \"Allow\",\n                            Principal: {\n                                CanonicalUser: { \"Fn::GetAtt\": [originAccessIdentityLogicalId, \"S3CanonicalUserId\"] },\n                            },\n                            Resource: { \"Fn::Join\": [\"\", [{ \"Fn::GetAtt\": [bucketLogicalId, \"Arn\"] }, \"/*\"]] },\n                        },\n                    ],\n                    Version: \"2012-10-17\",\n                },\n            },\n        });\n        expect(cfTemplate.Resources[originAccessIdentityLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::CloudFrontOriginAccessIdentity\",\n            Properties: {\n                CloudFrontOriginAccessIdentityConfig: {\n                    Comment: `Identity for ${cfOriginId2}`,\n                },\n            },\n        });\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Comment: \"app-dev backend website CDN\",\n                    CustomErrorResponses: [\n                        { ErrorCachingMinTTL: 0, ErrorCode: 500 },\n                        { ErrorCachingMinTTL: 0, ErrorCode: 504 },\n                    ],\n                    DefaultCacheBehavior: {\n                        AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"PATCH\", \"POST\", \"DELETE\"],\n                        Compress: true,\n                        CachePolicyId: { Ref: cachePolicyId },\n                        OriginRequestPolicyId: { Ref: originPolicyId },\n                        TargetOriginId: cfOriginId1,\n                        ViewerProtocolPolicy: \"redirect-to-https\",\n                        FunctionAssociations: [\n                            {\n                                EventType: \"viewer-request\",\n                                FunctionARN: {\n                                    \"Fn::GetAtt\": [requestFunction, \"FunctionARN\"],\n                                },\n                            },\n                        ],\n                    },\n                    CacheBehaviors: [\n                        {\n                            AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n                            CachePolicyId: \"658327ea-f89d-4fab-a63d-7e88639e58f6\",\n                            Compress: true,\n                            PathPattern: \"/assets/*\",\n                            TargetOriginId: cfOriginId2,\n                            ViewerProtocolPolicy: \"redirect-to-https\",\n                        },\n                    ],\n                    Enabled: true,\n                    HttpVersion: \"http2\",\n                    IPV6Enabled: true,\n                    Origins: [\n                        {\n                            Id: cfOriginId1,\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"https-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Join\": [\".\", [{ Ref: \"HttpApi\" }, \"execute-api.us-east-1.amazonaws.com\"]],\n                            },\n                        },\n                        {\n                            DomainName: { \"Fn::GetAtt\": [bucketLogicalId, \"RegionalDomainName\"] },\n                            Id: cfOriginId2,\n                            S3OriginConfig: {\n                                OriginAccessIdentity: {\n                                    \"Fn::Join\": [\n                                        \"\",\n                                        [\"origin-access-identity/cloudfront/\", { Ref: originAccessIdentityLogicalId }],\n                                    ],\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n        expect(cfTemplate.Resources[originPolicyId]).toStrictEqual({\n            Type: \"AWS::CloudFront::OriginRequestPolicy\",\n            Properties: {\n                OriginRequestPolicyConfig: {\n                    Name: \"app-dev-backend\",\n                    Comment: \"Origin request policy for the backend website.\",\n                    CookiesConfig: { CookieBehavior: \"all\" },\n                    QueryStringsConfig: { QueryStringBehavior: \"all\" },\n                    HeadersConfig: {\n                        HeaderBehavior: \"whitelist\",\n                        Headers: [\n                            \"Accept\",\n                            \"Accept-Language\",\n                            \"Content-Type\",\n                            \"Origin\",\n                            \"Referer\",\n                            \"User-Agent\",\n                            \"X-Requested-With\",\n                            \"X-Forwarded-Host\",\n                        ],\n                    },\n                },\n            },\n        });\n        expect(cfTemplate.Resources[cachePolicyId]).toStrictEqual({\n            Type: \"AWS::CloudFront::CachePolicy\",\n            Properties: {\n                CachePolicyConfig: {\n                    Comment: \"Cache policy for the backend website.\",\n                    DefaultTTL: 0,\n                    MaxTTL: 31536000,\n                    MinTTL: 0,\n                    Name: \"app-dev-backend\",\n                    ParametersInCacheKeyAndForwardedToOrigin: {\n                        CookiesConfig: { CookieBehavior: \"all\" },\n                        QueryStringsConfig: { QueryStringBehavior: \"all\" },\n                        HeadersConfig: {\n                            HeaderBehavior: \"whitelist\",\n                            Headers: [\"Authorization\"],\n                        },\n                        EnableAcceptEncodingBrotli: false,\n                        EnableAcceptEncodingGzip: false,\n                    },\n                },\n            },\n        });\n        expect(cfTemplate.Resources[requestFunction]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                Name: \"app-dev-us-east-1-backend-request\",\n                FunctionConfig: {\n                    Comment: \"app-dev-us-east-1-backend-request\",\n                    Runtime: \"cloudfront-js-1.0\",\n                },\n                AutoPublish: true,\n            },\n        });\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"backend\", \"AssetsBucketName\")]: {\n                Description: \"Name of the bucket that stores the website assets.\",\n                Value: { Ref: bucketLogicalId },\n            },\n            [computeLogicalId(\"backend\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: { \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"] },\n            },\n            [computeLogicalId(\"backend\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: { \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"] },\n            },\n            [computeLogicalId(\"backend\", \"DistributionId\")]: {\n                Description: \"ID of the CloudFront distribution.\",\n                Value: { Ref: cfDistributionLogicalId },\n            },\n        });\n    });\n\n    it(\"assets should be optional\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                    },\n                },\n            }),\n        });\n        const bucketLogicalId = computeLogicalId(\"backend\", \"Assets\");\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        const cfOriginId1 = computeLogicalId(\"backend\", \"CDN\", \"Origin1\");\n        const originPolicyId = computeLogicalId(\"backend\", \"BackendOriginPolicy\");\n        const cachePolicyId = computeLogicalId(\"backend\", \"BackendCachePolicy\");\n        const requestFunction = computeLogicalId(\"backend\", \"RequestFunction\");\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            bucketLogicalId,\n            originPolicyId,\n            cachePolicyId,\n            requestFunction,\n            cfDistributionLogicalId,\n        ]);\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Comment: \"app-dev backend website CDN\",\n                    CustomErrorResponses: [\n                        { ErrorCachingMinTTL: 0, ErrorCode: 500 },\n                        { ErrorCachingMinTTL: 0, ErrorCode: 504 },\n                    ],\n                    DefaultCacheBehavior: {\n                        AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"PATCH\", \"POST\", \"DELETE\"],\n                        Compress: true,\n                        CachePolicyId: { Ref: cachePolicyId },\n                        OriginRequestPolicyId: { Ref: originPolicyId },\n                        TargetOriginId: cfOriginId1,\n                        ViewerProtocolPolicy: \"redirect-to-https\",\n                        FunctionAssociations: [\n                            {\n                                EventType: \"viewer-request\",\n                                FunctionARN: { \"Fn::GetAtt\": [requestFunction, \"FunctionARN\"] },\n                            },\n                        ],\n                    },\n                    Enabled: true,\n                    HttpVersion: \"http2\",\n                    IPV6Enabled: true,\n                    Origins: [\n                        {\n                            Id: cfOriginId1,\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"https-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Join\": [\".\", [{ Ref: \"HttpApi\" }, \"execute-api.us-east-1.amazonaws.com\"]],\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n    });\n\n    it(\"should support REST APIs\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        apiGateway: \"rest\",\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"CDN\")]).toMatchObject({\n            Properties: {\n                DistributionConfig: {\n                    Origins: [\n                        {\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"https-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Join\": [\n                                    \".\",\n                                    [{ Ref: \"ApiGatewayRestApi\" }, \"execute-api.us-east-1.amazonaws.com\"],\n                                ],\n                            },\n                        },\n                    ],\n                },\n            },\n        });\n    });\n\n    it(\"should support a custom domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        assets: {\n                            \"/assets/*\": \"public\",\n                        },\n                        domain: \"example.com\",\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    // Check that CloudFront uses the custom ACM certificate and custom domain\n                    Aliases: [\"example.com\"],\n                    ViewerCertificate: {\n                        AcmCertificateArn:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        MinimumProtocolVersion: \"TLSv1.2_2021\",\n                        SslSupportMethod: \"sni-only\",\n                    },\n                },\n            },\n        });\n        // The domain should be the custom domain, not the CloudFront one\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"backend\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"backend\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should support multiple custom domains\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        assets: {\n                            \"/assets/*\": \"public\",\n                        },\n                        domain: [\"example.com\", \"www.example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        // Check that CloudFront uses all the custom domains\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Aliases: [\"example.com\", \"www.example.com\"],\n                },\n            },\n        });\n        // This should contain the first domain of the list\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"backend\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"backend\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should allow to customize the error page\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        errorPage: \"my/custom/error-page.html\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"backend\", \"CDN\");\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Properties: {\n                DistributionConfig: {\n                    CustomErrorResponses: [\n                        {\n                            ErrorCode: 500,\n                            ErrorCachingMinTTL: 0,\n                            ResponsePagePath: \"/error-page.html\",\n                        },\n                        {\n                            ErrorCode: 504,\n                            ErrorCachingMinTTL: 0,\n                            ResponsePagePath: \"/error-page.html\",\n                        },\n                    ],\n                },\n            },\n        });\n    });\n\n    it(\"should validate the error page path\", async () => {\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        backend: {\n                            type: \"server-side-website\",\n                            errorPage: \"/error.css\",\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"Invalid configuration in 'constructs.backend.errorPage': the custom error page must be a static HTML file. '/error.css' does not end with '.html'.\"\n        );\n    });\n\n    it(\"should validate the assets configuration\", async () => {\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        backend: {\n                            type: \"server-side-website\",\n                            assets: {\n                                \"/\": \"public\",\n                            },\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"Invalid key in 'constructs.backend.assets': '/' and '/*' cannot be routed to assets because the root URL already serves the backend application running in Lambda. You must use a sub-path instead, for example '/assets/*'.\"\n        );\n    });\n\n    it(\"should allow to redirect to the main domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        domain: [\"www.example.com\", \"example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        redirectToMainDomain: true,\n                    },\n                },\n            }),\n        });\n        const edgeFunction = computeLogicalId(\"backend\", \"RequestFunction\");\n        expect(cfTemplate.Resources[edgeFunction]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                FunctionCode: `function handler(event) {\n    var request = event.request;\n    request.headers[\"x-forwarded-host\"] = request.headers[\"host\"];\n    if (request.headers[\"host\"].value !== \"www.example.com\") {\n        return {\n            statusCode: 301,\n            statusDescription: \"Moved Permanently\",\n            headers: {\n                location: {\n                    value: \"https://www.example.com\" + request.uri\n                }\n            }\n        };\n    }\n    return request;\n}`,\n            },\n        });\n    });\n\n    it(\"should allow to override the forwarded headers\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        forwardedHeaders: [\"X-My-Custom-Header\", \"X-My-Other-Custom-Header\"],\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"BackendOriginPolicy\")]).toMatchObject({\n            Properties: {\n                OriginRequestPolicyConfig: {\n                    HeadersConfig: {\n                        HeaderBehavior: \"whitelist\",\n                        Headers: [\"X-My-Custom-Header\", \"X-My-Other-Custom-Header\"],\n                    },\n                },\n            },\n        });\n    });\n\n    it(\"should not forward the Authorization header in the Origin Policy\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        forwardedHeaders: [\"Authorization\", \"X-My-Custom-Header\"],\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"BackendOriginPolicy\")]).toMatchObject({\n            Properties: {\n                OriginRequestPolicyConfig: {\n                    HeadersConfig: {\n                        // Should not contain \"Authorization\"\n                        Headers: [\"X-My-Custom-Header\"],\n                    },\n                },\n            },\n        });\n    });\n\n    it(\"should forbid to force forwarding the Host header\", async () => {\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        backend: {\n                            type: \"server-side-website\",\n                            forwardedHeaders: [\"Host\"],\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"Invalid value in 'constructs.backend.forwardedHeaders': the 'Host' header cannot be forwarded (this is an API Gateway limitation). Use the 'X-Forwarded-Host' header in your code instead (it contains the value of the original 'Host' header).\"\n        );\n    });\n\n    it(\"should error if more than 10 headers are configured\", async () => {\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        backend: {\n                            type: \"server-side-website\",\n                            forwardedHeaders: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"],\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"Invalid value in 'constructs.backend.forwardedHeaders': 11 headers are configured but only 10 headers can be forwarded (this is an CloudFront limitation).\"\n        );\n    });\n\n    it(\"should synchronize assets to S3\", async () => {\n        const awsMock = mockAws();\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").resolves(\"bucket-name\");\n        /*\n         * This scenario simulates the following:\n         * - assets/logo.png is up to date, it should be ignored\n         * - assets/styles.css has changes, it should be updated to S3\n         * - assets/scripts.js is new, it should be created in S3\n         * - assets/image.jpg doesn't exist on disk, it should be removed from S3\n         */\n        awsMock.mockService(\"S3\", \"listObjectsV2\").resolves({\n            IsTruncated: false,\n            Contents: [\n                {\n                    Key: \"assets/logo.png\",\n                    ETag: computeS3ETag(\n                        fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/public/logo.png\"))\n                    ),\n                },\n                { Key: \"assets/styles.css\" },\n                { Key: \"assets/image.jpg\" },\n            ],\n        });\n        const putObjectSpy = awsMock.mockService(\"S3\", \"putObject\");\n        const deleteObjectsSpy = awsMock.mockService(\"S3\", \"deleteObjects\").resolves({\n            Deleted: [\n                {\n                    Key: \"assets/image.jpg\",\n                },\n            ],\n        });\n        const cloudfrontInvalidationSpy = awsMock.mockService(\"CloudFront\", \"createInvalidation\");\n\n        await runServerless({\n            fixture: \"serverSideWebsite\",\n            configExt: pluginConfigExt,\n            command: \"backend:assets:upload\",\n        });\n\n        // scripts.js and styles.css were updated\n        sinon.assert.callCount(putObjectSpy, 3);\n        expect(putObjectSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"assets/scripts.js\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/public/scripts.js\")),\n            ContentType: \"application/javascript\",\n        });\n        expect(putObjectSpy.secondCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"assets/styles.css\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/public/styles.css\")),\n            ContentType: \"text/css\",\n        });\n        // It should upload the custom error page\n        expect(putObjectSpy.thirdCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"error.html\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/serverSideWebsite/error.html\")),\n            ContentType: \"text/html\",\n        });\n        // image.jpg was deleted\n        sinon.assert.calledOnce(deleteObjectsSpy);\n        expect(deleteObjectsSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Delete: {\n                Objects: [\n                    {\n                        Key: \"assets/image.jpg\",\n                    },\n                ],\n            },\n        });\n        // A CloudFront invalidation was triggered\n        sinon.assert.calledOnce(cloudfrontInvalidationSpy);\n    });\n\n    it(\"allows overriding server side website properties\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    backend: {\n                        type: \"server-side-website\",\n                        extensions: {\n                            distribution: {\n                                Properties: {\n                                    DistributionConfig: {\n                                        Comment: \"This is my comment\",\n                                    },\n                                },\n                            },\n                            bucket: {\n                                Properties: {\n                                    ObjectLockEnabled: true,\n                                },\n                            },\n                        },\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"CDN\")].Properties).toMatchObject({\n            DistributionConfig: {\n                Comment: \"This is my comment\",\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"backend\", \"Assets\")].Properties).toMatchObject({\n            ObjectLockEnabled: true,\n        });\n    });\n\n    it(\"trims CloudFront function names to stay under the limit\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            options: {\n                stage: \"super-long-stage-name\",\n            },\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    \"suuuper-long-construct-name\": {\n                        type: \"server-side-website\",\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"suuuper-long-construct-name\", \"RequestFunction\")]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                Name: \"app-super-long-stage-name-us-east-1-suuuper-long-construc-f3b7e1\",\n            },\n        });\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
