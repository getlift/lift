{
  "version": 3,
  "sources": ["../../../test/unit/staticWebsite.test.ts"],
  "sourcesContent": ["import * as sinon from \"sinon\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { get } from \"lodash\";\nimport { baseConfig, pluginConfigExt, runServerless } from \"../utils/runServerless\";\nimport * as CloudFormationHelpers from \"../../src/CloudFormation\";\nimport { computeS3ETag } from \"../../src/utils/s3-sync\";\nimport { mockAws } from \"../utils/mockAws\";\n\ndescribe(\"static websites\", () => {\n    afterEach(() => {\n        sinon.restore();\n    });\n\n    it(\"should create all required resources\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                    },\n                },\n            }),\n        });\n        const bucketLogicalId = computeLogicalId(\"landing\", \"Bucket\");\n        const bucketPolicyLogicalId = computeLogicalId(\"landing\", \"Bucket\", \"Policy\");\n        const responseFunction = computeLogicalId(\"landing\", \"ResponseFunction\");\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        const cfOriginId = computeLogicalId(\"landing\", \"CDN\", \"Origin1\");\n        expect(Object.keys(cfTemplate.Resources)).toStrictEqual([\n            \"ServerlessDeploymentBucket\",\n            \"ServerlessDeploymentBucketPolicy\",\n            bucketLogicalId,\n            bucketPolicyLogicalId,\n            responseFunction,\n            cfDistributionLogicalId,\n        ]);\n        expect(cfTemplate.Resources[bucketLogicalId]).toStrictEqual({\n            Type: \"AWS::S3::Bucket\",\n            UpdateReplacePolicy: \"Delete\",\n            DeletionPolicy: \"Delete\",\n            Properties: {\n                WebsiteConfiguration: {\n                    IndexDocument: \"index.html\",\n                },\n            },\n        });\n        expect(cfTemplate.Resources[bucketPolicyLogicalId]).toStrictEqual({\n            Type: \"AWS::S3::BucketPolicy\",\n            Properties: {\n                Bucket: {\n                    Ref: bucketLogicalId,\n                },\n                PolicyDocument: {\n                    Statement: [\n                        {\n                            Action: \"s3:GetObject\",\n                            Effect: \"Allow\",\n                            Principal: {\n                                AWS: \"*\",\n                            },\n                            Resource: { \"Fn::Join\": [\"\", [{ \"Fn::GetAtt\": [bucketLogicalId, \"Arn\"] }, \"/*\"]] },\n                        },\n                    ],\n                    Version: \"2012-10-17\",\n                },\n            },\n        });\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Comment: \"app-dev landing website CDN\",\n                    CustomErrorResponses: [\n                        {\n                            // The response code is forced to 200 and changed to /index.html\n                            ErrorCachingMinTTL: 0,\n                            ErrorCode: 404,\n                            ResponseCode: 200,\n                            ResponsePagePath: \"/index.html\",\n                        },\n                    ],\n                    DefaultCacheBehavior: {\n                        AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n                        CachePolicyId: \"658327ea-f89d-4fab-a63d-7e88639e58f6\",\n                        Compress: true,\n                        TargetOriginId: cfOriginId,\n                        ViewerProtocolPolicy: \"redirect-to-https\",\n                        FunctionAssociations: [\n                            {\n                                EventType: \"viewer-response\",\n                                FunctionARN: {\n                                    \"Fn::GetAtt\": [responseFunction, \"FunctionARN\"],\n                                },\n                            },\n                        ],\n                    },\n                    DefaultRootObject: \"index.html\",\n                    Enabled: true,\n                    HttpVersion: \"http2\",\n                    IPV6Enabled: true,\n                    Origins: [\n                        {\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"http-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Select\": [\n                                    2,\n                                    {\n                                        \"Fn::Split\": [\n                                            \"/\",\n                                            {\n                                                \"Fn::GetAtt\": [bucketLogicalId, \"WebsiteURL\"],\n                                            },\n                                        ],\n                                    },\n                                ],\n                            },\n                            Id: cfOriginId,\n                        },\n                    ],\n                },\n            },\n        });\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"landing\", \"BucketName\")]: {\n                Description: \"Name of the bucket that stores the static website.\",\n                Value: {\n                    Ref: bucketLogicalId,\n                },\n            },\n            [computeLogicalId(\"landing\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n            [computeLogicalId(\"landing\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n            [computeLogicalId(\"landing\", \"DistributionId\")]: {\n                Description: \"ID of the CloudFront distribution.\",\n                Value: {\n                    Ref: cfDistributionLogicalId,\n                },\n            },\n        });\n        expect(cfTemplate.Resources[responseFunction]).toStrictEqual({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                AutoPublish: true,\n                FunctionConfig: {\n                    Comment: \"app-dev-us-east-1-landing-response\",\n                    Runtime: \"cloudfront-js-1.0\",\n                },\n                FunctionCode: `function handler(event) {\n    var response = event.response;\n    response.headers = Object.assign({}, {\n    \"x-frame-options\": {\n        \"value\": \"SAMEORIGIN\"\n    },\n    \"x-content-type-options\": {\n        \"value\": \"nosniff\"\n    },\n    \"x-xss-protection\": {\n        \"value\": \"1; mode=block\"\n    },\n    \"strict-transport-security\": {\n        \"value\": \"max-age=63072000\"\n    }\n}, response.headers);\n    return response;\n}`,\n                Name: \"app-dev-us-east-1-landing-response\",\n            },\n        });\n    });\n\n    it(\"should support a custom domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        domain: \"example.com\",\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        // Check that CloudFront uses the custom ACM certificate and custom domain\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Aliases: [\"example.com\"],\n                    ViewerCertificate: {\n                        AcmCertificateArn:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        MinimumProtocolVersion: \"TLSv1.2_2021\",\n                        SslSupportMethod: \"sni-only\",\n                    },\n                },\n            },\n        });\n        // The domain should be the custom domain, not the CloudFront one\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"landing\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"landing\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should support multiple custom domains\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        domain: [\"example.com\", \"www.example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        // Check that CloudFront uses all the custom domains\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toMatchObject({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Aliases: [\"example.com\", \"www.example.com\"],\n                },\n            },\n        });\n        // This should contain the first domain of the list\n        expect(cfTemplate.Outputs).toMatchObject({\n            [computeLogicalId(\"landing\", \"Domain\")]: {\n                Description: \"Website domain name.\",\n                Value: \"example.com\",\n            },\n            [computeLogicalId(\"landing\", \"CloudFrontCName\")]: {\n                Description: \"CloudFront CNAME.\",\n                Value: {\n                    \"Fn::GetAtt\": [cfDistributionLogicalId, \"DomainName\"],\n                },\n            },\n        });\n    });\n\n    it(\"should allow to customize security HTTP headers\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        security: {\n                            allowIframe: true,\n                        },\n                    },\n                },\n            }),\n        });\n        const edgeFunction = computeLogicalId(\"landing\", \"ResponseFunction\");\n        expect(cfTemplate.Resources[edgeFunction]).toStrictEqual({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                AutoPublish: true,\n                // Check that the `x-frame-options` header is not set\n                FunctionCode: `function handler(event) {\n    var response = event.response;\n    response.headers = Object.assign({}, {\n    \"x-content-type-options\": {\n        \"value\": \"nosniff\"\n    },\n    \"x-xss-protection\": {\n        \"value\": \"1; mode=block\"\n    },\n    \"strict-transport-security\": {\n        \"value\": \"max-age=63072000\"\n    }\n}, response.headers);\n    return response;\n}`,\n                FunctionConfig: {\n                    Comment: \"app-dev-us-east-1-landing-response\",\n                    Runtime: \"cloudfront-js-1.0\",\n                },\n                Name: \"app-dev-us-east-1-landing-response\",\n            },\n        });\n    });\n\n    it(\"should allow to redirect to the main domain\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        domain: [\"www.example.com\", \"example.com\"],\n                        certificate:\n                            \"arn:aws:acm:us-east-1:123456615250:certificate/0a28e63d-d3a9-4578-9f8b-14347bfe8123\",\n                        redirectToMainDomain: true,\n                    },\n                },\n            }),\n        });\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        const requestFunction = computeLogicalId(\"landing\", \"RequestFunction\");\n        const responseFunction = computeLogicalId(\"landing\", \"ResponseFunction\");\n        expect(cfTemplate.Resources[requestFunction]).toMatchInlineSnapshot(`\n            Object {\n              \"Properties\": Object {\n                \"AutoPublish\": true,\n                \"FunctionCode\": \"function handler(event) {\n                var request = event.request;\n                if (request.headers[\\\\\"host\\\\\"].value !== \\\\\"www.example.com\\\\\") {\n                    return {\n                        statusCode: 301,\n                        statusDescription: \\\\\"Moved Permanently\\\\\",\n                        headers: {\n                            location: {\n                                value: \\\\\"https://www.example.com\\\\\" + request.uri\n                            }\n                        }\n                    };\n                }\n                return request;\n            }\",\n                \"FunctionConfig\": Object {\n                  \"Comment\": \"app-dev-us-east-1-landing-request\",\n                  \"Runtime\": \"cloudfront-js-1.0\",\n                },\n                \"Name\": \"app-dev-us-east-1-landing-request\",\n              },\n              \"Type\": \"AWS::CloudFront::Function\",\n            }\n        `);\n\n        expect(\n            get(\n                cfTemplate.Resources[cfDistributionLogicalId],\n                \"Properties.DistributionConfig.DefaultCacheBehavior.FunctionAssociations\"\n            )\n        ).toMatchInlineSnapshot(`\n        Array [\n          Object {\n            \"EventType\": \"viewer-response\",\n            \"FunctionARN\": Object {\n              \"Fn::GetAtt\": Array [\n                \"${responseFunction}\",\n                \"FunctionARN\",\n              ],\n            },\n          },\n          Object {\n            \"EventType\": \"viewer-request\",\n            \"FunctionARN\": Object {\n              \"Fn::GetAtt\": Array [\n                \"${requestFunction}\",\n                \"FunctionARN\",\n              ],\n            },\n          },\n        ]\n    `);\n    });\n\n    it(\"should allow to customize the error page\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        // We do not set a leading `/` on purpose: we want to check\n                        // that Lift will add it\n                        errorPage: \"my/custom/error.html\",\n                    },\n                },\n            }),\n        });\n\n        const cfDistributionLogicalId = computeLogicalId(\"landing\", \"CDN\");\n        const bucketLogicalId = computeLogicalId(\"landing\", \"Bucket\");\n        const responseFunction = computeLogicalId(\"landing\", \"ResponseFunction\");\n        const cfOriginId = computeLogicalId(\"landing\", \"CDN\", \"Origin1\");\n        expect(cfTemplate.Resources[cfDistributionLogicalId]).toStrictEqual({\n            Type: \"AWS::CloudFront::Distribution\",\n            Properties: {\n                DistributionConfig: {\n                    Comment: \"app-dev landing website CDN\",\n                    CustomErrorResponses: [\n                        {\n                            // The response code is forced to 404 and changed to /error.html\n                            ErrorCachingMinTTL: 0,\n                            ErrorCode: 404,\n                            ResponseCode: 404,\n                            ResponsePagePath: \"/my/custom/error.html\",\n                        },\n                    ],\n                    DefaultCacheBehavior: {\n                        AllowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n                        CachePolicyId: \"658327ea-f89d-4fab-a63d-7e88639e58f6\",\n                        Compress: true,\n                        TargetOriginId: cfOriginId,\n                        ViewerProtocolPolicy: \"redirect-to-https\",\n                        FunctionAssociations: [\n                            {\n                                EventType: \"viewer-response\",\n                                FunctionARN: {\n                                    \"Fn::GetAtt\": [responseFunction, \"FunctionARN\"],\n                                },\n                            },\n                        ],\n                    },\n                    DefaultRootObject: \"index.html\",\n                    Enabled: true,\n                    HttpVersion: \"http2\",\n                    IPV6Enabled: true,\n                    Origins: [\n                        {\n                            CustomOriginConfig: {\n                                OriginProtocolPolicy: \"http-only\",\n                                OriginSSLProtocols: [\"TLSv1.2\"],\n                            },\n                            DomainName: {\n                                \"Fn::Select\": [\n                                    2,\n                                    {\n                                        \"Fn::Split\": [\n                                            \"/\",\n                                            {\n                                                \"Fn::GetAtt\": [bucketLogicalId, \"WebsiteURL\"],\n                                            },\n                                        ],\n                                    },\n                                ],\n                            },\n                            Id: cfOriginId,\n                        },\n                    ],\n                },\n            },\n        });\n    });\n\n    it(\"should validate the error page path\", async () => {\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        landing: {\n                            type: \"static-website\",\n                            path: \".\",\n                            errorPage: \"./error.html\",\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"The 'errorPage' option of the 'landing' static website cannot start with './' or '../'. (it cannot be a relative path).\"\n        );\n        await expect(() => {\n            return runServerless({\n                command: \"package\",\n                config: Object.assign(baseConfig, {\n                    constructs: {\n                        landing: {\n                            type: \"static-website\",\n                            path: \".\",\n                            errorPage: \"../error.html\",\n                        },\n                    },\n                }),\n            });\n        }).rejects.toThrowError(\n            \"The 'errorPage' option of the 'landing' static website cannot start with './' or '../'. (it cannot be a relative path).\"\n        );\n    });\n\n    it(\"should synchronize files to S3\", async () => {\n        const awsMock = mockAws();\n        sinon.stub(CloudFormationHelpers, \"getStackOutput\").resolves(\"bucket-name\");\n        /*\n         * This scenario simulates the following:\n         * - index.html is up to date, it should be ignored\n         * - styles.css has changes, it should be updated to S3\n         * - scripts.js is new, it should be created in S3\n         * - image.jpg doesn't exist on disk, it should be removed from S3\n         */\n        awsMock.mockService(\"S3\", \"listObjectsV2\").resolves({\n            IsTruncated: false,\n            Contents: [\n                {\n                    Key: \"index.html\",\n                    ETag: computeS3ETag(\n                        fs.readFileSync(path.join(__dirname, \"../fixtures/staticWebsites/public/index.html\"))\n                    ),\n                },\n                { Key: \"styles.css\" },\n                { Key: \"image.jpg\" },\n            ],\n        });\n        const putObjectSpy = awsMock.mockService(\"S3\", \"putObject\");\n        const deleteObjectsSpy = awsMock.mockService(\"S3\", \"deleteObjects\").resolves({\n            Deleted: [\n                {\n                    Key: \"image.jpg\",\n                },\n            ],\n        });\n        const cloudfrontInvalidationSpy = awsMock.mockService(\"CloudFront\", \"createInvalidation\");\n\n        await runServerless({\n            fixture: \"staticWebsites\",\n            configExt: pluginConfigExt,\n            command: \"landing:upload\",\n        });\n\n        // scripts.js and styles.css were updated\n        sinon.assert.callCount(putObjectSpy, 2);\n        expect(putObjectSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"scripts.js\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/staticWebsites/public/scripts.js\")),\n            ContentType: \"application/javascript\",\n        });\n        expect(putObjectSpy.secondCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Key: \"styles.css\",\n            Body: fs.readFileSync(path.join(__dirname, \"../fixtures/staticWebsites/public/styles.css\")),\n            ContentType: \"text/css\",\n        });\n        // image.jpg was deleted\n        sinon.assert.calledOnce(deleteObjectsSpy);\n        expect(deleteObjectsSpy.firstCall.firstArg).toEqual({\n            Bucket: \"bucket-name\",\n            Delete: {\n                Objects: [\n                    {\n                        Key: \"image.jpg\",\n                    },\n                ],\n            },\n        });\n        // A CloudFront invalidation was triggered\n        sinon.assert.calledOnce(cloudfrontInvalidationSpy);\n    });\n\n    it(\"allows overriding static website properties\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    landing: {\n                        type: \"static-website\",\n                        path: \".\",\n                        extensions: {\n                            distribution: {\n                                Properties: {\n                                    DistributionConfig: {\n                                        Comment: \"This is my comment\",\n                                    },\n                                },\n                            },\n                            bucket: {\n                                Properties: {\n                                    ObjectLockEnabled: true,\n                                },\n                            },\n                        },\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"landing\", \"CDN\")].Properties).toMatchObject({\n            DistributionConfig: {\n                Comment: \"This is my comment\",\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"landing\", \"Bucket\")].Properties).toMatchObject({\n            ObjectLockEnabled: true,\n        });\n    });\n\n    it(\"trims CloudFront function names to stay under the limit\", async () => {\n        const { cfTemplate, computeLogicalId } = await runServerless({\n            command: \"package\",\n            options: {\n                stage: \"super-long-stage-name\",\n            },\n            config: Object.assign(baseConfig, {\n                constructs: {\n                    \"suuuper-long-construct-name\": {\n                        type: \"static-website\",\n                        path: \".\",\n                        domain: [\"foo.com\", \"bar.com\"],\n                        certificate: \"arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234\",\n                        redirectToMainDomain: true,\n                    },\n                },\n            }),\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"suuuper-long-construct-name\", \"RequestFunction\")]).toMatchObject({\n            Type: \"AWS::CloudFront::Function\",\n            Properties: {\n                Name: \"app-super-long-stage-name-us-east-1-suuuper-long-construc-f3b7e1\",\n            },\n        });\n        expect(cfTemplate.Resources[computeLogicalId(\"suuuper-long-construct-name\", \"ResponseFunction\")]).toMatchObject(\n            {\n                Type: \"AWS::CloudFront::Function\",\n                Properties: {\n                    Name: \"app-super-long-stage-name-us-east-1-suuuper-long-construc-8c1f76\",\n                },\n            }\n        );\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
