{
  "version": 3,
  "sources": ["../../../src/classes/aws.ts"],
  "sourcesContent": ["import type {\n    DeleteObjectsOutput,\n    DeleteObjectsRequest,\n    ListObjectsV2Output,\n    ListObjectsV2Request,\n} from \"aws-sdk/clients/s3\";\nimport type { CreateInvalidationRequest, CreateInvalidationResult } from \"aws-sdk/clients/cloudfront\";\nimport type { AwsProvider } from \"@lift/providers\";\nimport type { Provider as LegacyAwsProvider } from \"../types/serverless\";\n\n// This is defined as a separate function to allow mocking in tests\nexport async function awsRequest<Input, Output>(\n    params: Input,\n    service: string,\n    method: string,\n    provider: LegacyAwsProvider\n): Promise<Output> {\n    return await provider.request<Input, Output>(service, method, params);\n}\n\nexport async function emptyBucket(aws: AwsProvider, bucketName: string): Promise<void> {\n    const data = await aws.request<ListObjectsV2Request, ListObjectsV2Output>(\"S3\", \"listObjectsV2\", {\n        Bucket: bucketName,\n    });\n    if (data.Contents === undefined) {\n        return;\n    }\n    const keys = data.Contents.map((item) => item.Key).filter((key): key is string => key !== undefined);\n    await aws.request<DeleteObjectsRequest, DeleteObjectsOutput>(\"S3\", \"deleteObjects\", {\n        Bucket: bucketName,\n        Delete: {\n            Objects: keys.map((key) => ({ Key: key })),\n        },\n    });\n}\n\nexport async function invalidateCloudFrontCache(aws: AwsProvider, distributionId: string): Promise<void> {\n    await aws.request<CreateInvalidationRequest, CreateInvalidationResult>(\"CloudFront\", \"createInvalidation\", {\n        DistributionId: distributionId,\n        InvalidationBatch: {\n            // This should be a unique ID: we use a timestamp\n            CallerReference: Date.now().toString(),\n            Paths: {\n                // Invalidate everything\n                Items: [\"/*\"],\n                Quantity: 1,\n            },\n        },\n    });\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,0BACI,QACA,SACA,QACA,UACe;AACf,SAAO,MAAM,SAAS,QAAuB,SAAS,QAAQ;AAAA;AAGlE,2BAAkC,KAAkB,YAAmC;AACnF,QAAM,OAAO,MAAM,IAAI,QAAmD,MAAM,iBAAiB;AAAA,IAC7F,QAAQ;AAAA;AAEZ,MAAI,KAAK,aAAa,QAAW;AAC7B;AAAA;AAEJ,QAAM,OAAO,KAAK,SAAS,IAAI,CAAC,SAAS,KAAK,KAAK,OAAO,CAAC,QAAuB,QAAQ;AAC1F,QAAM,IAAI,QAAmD,MAAM,iBAAiB;AAAA,IAChF,QAAQ;AAAA,IACR,QAAQ;AAAA,MACJ,SAAS,KAAK,IAAI,CAAC,QAAS,GAAE,KAAK;AAAA;AAAA;AAAA;AAK/C,yCAAgD,KAAkB,gBAAuC;AACrG,QAAM,IAAI,QAA6D,cAAc,sBAAsB;AAAA,IACvG,gBAAgB;AAAA,IAChB,mBAAmB;AAAA,MAEf,iBAAiB,KAAK,MAAM;AAAA,MAC5B,OAAO;AAAA,QAEH,OAAO,CAAC;AAAA,QACR,UAAU;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
