{
  "version": 3,
  "sources": ["../../../../../src/constructs/aws/abstracts/StaticWebsiteAbstract.ts"],
  "sourcesContent": ["import * as acm from \"aws-cdk-lib/aws-certificatemanager\";\nimport * as cloudfront from \"aws-cdk-lib/aws-cloudfront\";\nimport type { CfnDistribution, ErrorResponse } from \"aws-cdk-lib/aws-cloudfront\";\nimport {\n    AllowedMethods,\n    CachePolicy,\n    Distribution,\n    FunctionEventType,\n    HttpVersion,\n    ViewerProtocolPolicy,\n} from \"aws-cdk-lib/aws-cloudfront\";\nimport { S3Origin } from \"aws-cdk-lib/aws-cloudfront-origins\";\nimport type { BucketProps, CfnBucket } from \"aws-cdk-lib/aws-s3\";\nimport { Bucket } from \"aws-cdk-lib/aws-s3\";\nimport type { Construct as CdkConstruct } from \"constructs\";\nimport type { CfnResource } from \"aws-cdk-lib\";\nimport { Duration, RemovalPolicy } from \"aws-cdk-lib\";\nimport { CfnOutput } from \"aws-cdk-lib\";\nimport type { ConstructCommands } from \"@lift/constructs\";\nimport { AwsConstruct } from \"@lift/constructs/abstracts\";\nimport type { AwsProvider } from \"@lift/providers\";\nimport chalk from \"chalk\";\nimport type { FromSchema } from \"json-schema-to-ts\";\nimport { flatten } from \"lodash\";\nimport { emptyBucket, invalidateCloudFrontCache } from \"../../../classes/aws\";\nimport ServerlessError from \"../../../utils/error\";\nimport type { Progress } from \"../../../utils/logger\";\nimport { getUtils } from \"../../../utils/logger\";\nimport { ensureNameMaxLength } from \"../../../utils/naming\";\nimport { s3Sync } from \"../../../utils/s3-sync\";\n\nexport const COMMON_STATIC_WEBSITE_DEFINITION = {\n    type: \"object\",\n    properties: {\n        path: { type: \"string\" },\n        domain: {\n            anyOf: [\n                { type: \"string\" },\n                {\n                    type: \"array\",\n                    items: { type: \"string\" },\n                },\n            ],\n        },\n        certificate: { type: \"string\" },\n        security: {\n            type: \"object\",\n            properties: {\n                allowIframe: { type: \"boolean\" },\n            },\n            additionalProperties: false,\n        },\n        errorPage: { type: \"string\" },\n        redirectToMainDomain: { type: \"boolean\" },\n    },\n    additionalProperties: false,\n    required: [\"path\"],\n} as const;\n\nexport type CommonStaticWebsiteConfiguration = FromSchema<typeof COMMON_STATIC_WEBSITE_DEFINITION>;\n\nexport abstract class StaticWebsiteAbstract extends AwsConstruct {\n    public static commands: ConstructCommands = {\n        upload: {\n            usage: \"Upload files directly to S3 without going through a CloudFormation deployment.\",\n            handler: StaticWebsiteAbstract.prototype.uploadWebsiteCommand,\n        },\n    };\n\n    protected readonly distribution: Distribution;\n    protected readonly bucket: Bucket;\n    protected readonly domains: string[] | undefined;\n    private readonly bucketNameOutput: CfnOutput;\n    private readonly domainOutput: CfnOutput;\n    private readonly cnameOutput: CfnOutput;\n    private readonly distributionIdOutput: CfnOutput;\n\n    constructor(\n        scope: CdkConstruct,\n        protected readonly id: string,\n        protected readonly configuration: CommonStaticWebsiteConfiguration,\n        protected readonly provider: AwsProvider\n    ) {\n        super(scope, id);\n\n        const bucketProps = this.getBucketProps();\n\n        this.bucket = new Bucket(this, \"Bucket\", bucketProps);\n\n        // Cast the domains to an array\n        // if configuration.domain is an empty array or an empty string, ignore it\n        this.domains =\n            configuration.domain !== undefined && configuration.domain.length > 0\n                ? flatten([configuration.domain])\n                : undefined;\n        // if configuration.certificate is an empty string, ignore it\n        const certificate =\n            configuration.certificate !== undefined && configuration.certificate !== \"\"\n                ? acm.Certificate.fromCertificateArn(this, \"Certificate\", configuration.certificate)\n                : undefined;\n\n        if (this.domains !== undefined && certificate === undefined) {\n            throw new ServerlessError(\n                `Invalid configuration for the static website '${id}': if a domain is configured, then a certificate ARN must be configured in the 'certificate' option.\\n` +\n                    \"See https://github.com/getlift/lift/blob/master/docs/static-website.md#custom-domain\",\n                \"LIFT_INVALID_CONSTRUCT_CONFIGURATION\"\n            );\n        }\n\n        const functionAssociations = [\n            {\n                function: this.createResponseFunction(),\n                eventType: FunctionEventType.VIEWER_RESPONSE,\n            },\n        ];\n\n        this.distribution = new Distribution(this, \"CDN\", {\n            comment: `${provider.stackName} ${id} website CDN`,\n            // Send all page requests to index.html\n            defaultRootObject: \"index.html\",\n            defaultBehavior: {\n                // Origins are where CloudFront fetches content\n                origin: new S3Origin(this.bucket),\n                allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,\n                // Use the \"Managed-CachingOptimized\" policy\n                // See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policies-list\n                cachePolicy: CachePolicy.CACHING_OPTIMIZED,\n                viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n                functionAssociations: functionAssociations,\n            },\n            errorResponses: [this.errorResponse()],\n            // Enable http2 transfer for better performances\n            httpVersion: HttpVersion.HTTP2,\n            certificate: certificate,\n            domainNames: this.domains,\n        });\n\n        // CloudFormation outputs\n        this.bucketNameOutput = new CfnOutput(this, \"BucketName\", {\n            description: \"Name of the bucket that stores the static website.\",\n            value: this.bucket.bucketName,\n        });\n        let websiteDomain: string = this.distribution.distributionDomainName;\n        if (this.domains !== undefined) {\n            // In case of multiple domains, we take the first one\n            websiteDomain = this.domains[0];\n        }\n        this.domainOutput = new CfnOutput(this, \"Domain\", {\n            description: \"Website domain name.\",\n            value: websiteDomain,\n        });\n        this.cnameOutput = new CfnOutput(this, \"CloudFrontCName\", {\n            description: \"CloudFront CNAME.\",\n            value: this.distribution.distributionDomainName,\n        });\n        this.distributionIdOutput = new CfnOutput(this, \"DistributionId\", {\n            description: \"ID of the CloudFront distribution.\",\n            value: this.distribution.distributionId,\n        });\n    }\n\n    variables(): Record<string, unknown> {\n        return {\n            cname: this.distribution.distributionDomainName,\n        };\n    }\n\n    outputs(): Record<string, () => Promise<string | undefined>> {\n        return {\n            url: () => this.getUrl(),\n            cname: () => this.getCName(),\n        };\n    }\n\n    extend(): Record<string, CfnResource> {\n        return {\n            distribution: this.distribution.node.defaultChild as CfnDistribution,\n            bucket: this.bucket.node.defaultChild as CfnBucket,\n        };\n    }\n\n    async postDeploy(): Promise<void> {\n        await this.uploadWebsite();\n    }\n\n    async uploadWebsiteCommand(): Promise<void> {\n        getUtils().log(`Deploying the static website '${this.id}'`);\n\n        const fileChangeCount = await this.uploadWebsite();\n\n        const domain = await this.getDomain();\n        if (domain !== undefined) {\n            getUtils().log();\n            getUtils().log.success(`Deployed https://${domain} ${chalk.gray(`(${fileChangeCount} files changed)`)}`);\n        }\n    }\n\n    private async uploadWebsite(): Promise<number> {\n        const bucketName = await this.getBucketName();\n        if (bucketName === undefined) {\n            throw new ServerlessError(\n                `Could not find the bucket in which to deploy the '${this.id}' website: did you forget to run 'serverless deploy' first?`,\n                \"LIFT_MISSING_STACK_OUTPUT\"\n            );\n        }\n\n        const progress = getUtils().progress;\n        let uploadProgress: Progress | undefined;\n        if (progress) {\n            uploadProgress = progress.create({\n                message: `Uploading directory '${this.configuration.path}' to bucket '${bucketName}'`,\n            });\n            getUtils().log.verbose(`Uploading directory '${this.configuration.path}' to bucket '${bucketName}'`);\n        } else {\n            getUtils().log(`Uploading directory '${this.configuration.path}' to bucket '${bucketName}'`);\n        }\n        const { hasChanges, fileChangeCount } = await s3Sync({\n            aws: this.provider,\n            localPath: this.configuration.path,\n            bucketName,\n        });\n        if (hasChanges) {\n            if (uploadProgress) {\n                uploadProgress.update(`Clearing CloudFront DNS cache`);\n            } else {\n                getUtils().log(`Clearing CloudFront DNS cache`);\n            }\n            await this.clearCDNCache();\n        }\n\n        if (uploadProgress) {\n            uploadProgress.remove();\n        }\n\n        return fileChangeCount;\n    }\n\n    private async clearCDNCache(): Promise<void> {\n        const distributionId = await this.getDistributionId();\n        if (distributionId === undefined) {\n            return;\n        }\n        await invalidateCloudFrontCache(this.provider, distributionId);\n    }\n\n    async preRemove(): Promise<void> {\n        const bucketName = await this.getBucketName();\n        if (bucketName === undefined) {\n            // No bucket found => nothing to delete!\n            return;\n        }\n\n        getUtils().log(\n            `Emptying S3 bucket '${bucketName}' for the '${this.id}' static website, else CloudFormation will fail (it cannot delete a non-empty bucket)`\n        );\n        await emptyBucket(this.provider, bucketName);\n    }\n\n    async getUrl(): Promise<string | undefined> {\n        const domain = await this.getDomain();\n        if (domain === undefined) {\n            return undefined;\n        }\n\n        return `https://${domain}`;\n    }\n\n    async getBucketName(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.bucketNameOutput);\n    }\n\n    async getDomain(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.domainOutput);\n    }\n\n    async getCName(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.cnameOutput);\n    }\n\n    async getDistributionId(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.distributionIdOutput);\n    }\n\n    errorPath(): string | undefined {\n        if (this.configuration.errorPage !== undefined) {\n            let errorPath = this.configuration.errorPage;\n            if (errorPath.startsWith(\"./\") || errorPath.startsWith(\"../\")) {\n                throw new ServerlessError(\n                    `The 'errorPage' option of the '${this.id}' static website cannot start with './' or '../'. ` +\n                        `(it cannot be a relative path).`,\n                    \"LIFT_INVALID_CONSTRUCT_CONFIGURATION\"\n                );\n            }\n            if (!errorPath.startsWith(\"/\")) {\n                errorPath = `/${errorPath}`;\n            }\n\n            return errorPath;\n        }\n    }\n\n    private errorResponse(): ErrorResponse {\n        const errorPath = this.errorPath();\n\n        // Custom error page\n        if (errorPath !== undefined) {\n            return {\n                httpStatus: 404,\n                ttl: Duration.seconds(0),\n                responseHttpStatus: 404,\n                responsePagePath: errorPath,\n            };\n        }\n\n        /**\n         * The default behavior is optimized for SPA: all unknown URLs are served\n         * by index.html so that routing can be done client-side.\n         */\n        return {\n            httpStatus: 404,\n            ttl: Duration.seconds(0),\n            responseHttpStatus: 200,\n            responsePagePath: \"/index.html\",\n        };\n    }\n\n    private createResponseFunction(): cloudfront.Function {\n        const securityHeaders: Record<string, { value: string }> = {\n            \"x-frame-options\": { value: \"SAMEORIGIN\" },\n            \"x-content-type-options\": { value: \"nosniff\" },\n            \"x-xss-protection\": { value: \"1; mode=block\" },\n            \"strict-transport-security\": { value: \"max-age=63072000\" },\n        };\n        if (this.configuration.security?.allowIframe === true) {\n            delete securityHeaders[\"x-frame-options\"];\n        }\n        const jsonHeaders = JSON.stringify(securityHeaders, undefined, 4);\n        /**\n         * CloudFront function that manipulates the HTTP responses to add security headers.\n         */\n        const code = `function handler(event) {\n    var response = event.response;\n    response.headers = Object.assign({}, ${jsonHeaders}, response.headers);\n    return response;\n}`;\n\n        const functionName = ensureNameMaxLength(\n            `${this.provider.stackName}-${this.provider.region}-${this.id}-response`,\n            64\n        );\n\n        return new cloudfront.Function(this, \"ResponseFunction\", {\n            functionName,\n            code: cloudfront.FunctionCode.fromInline(code),\n        });\n    }\n\n    getBucketProps(): BucketProps {\n        return {\n            // For a static website, the content is code that should be versioned elsewhere\n            removalPolicy: RemovalPolicy.DESTROY,\n        };\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqB;AACrB,iBAA4B;AAE5B,4BAOO;AACP,oCAAyB;AAEzB,oBAAuB;AAGvB,yBAAwC;AACxC,0BAA0B;AAE1B,uBAA6B;AAE7B,mBAAkB;AAElB,oBAAwB;AACxB,iBAAuD;AACvD,mBAA4B;AAE5B,oBAAyB;AACzB,oBAAoC;AACpC,qBAAuB;AAEhB,MAAM,mCAAmC;AAAA,EAC5C,MAAM;AAAA,EACN,YAAY;AAAA,IACR,MAAM,EAAE,MAAM;AAAA,IACd,QAAQ;AAAA,MACJ,OAAO;AAAA,QACH,EAAE,MAAM;AAAA,QACR;AAAA,UACI,MAAM;AAAA,UACN,OAAO,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA,IAI3B,aAAa,EAAE,MAAM;AAAA,IACrB,UAAU;AAAA,MACN,MAAM;AAAA,MACN,YAAY;AAAA,QACR,aAAa,EAAE,MAAM;AAAA;AAAA,MAEzB,sBAAsB;AAAA;AAAA,IAE1B,WAAW,EAAE,MAAM;AAAA,IACnB,sBAAsB,EAAE,MAAM;AAAA;AAAA,EAElC,sBAAsB;AAAA,EACtB,UAAU,CAAC;AAAA;AAKR,6CAA6C,8BAAa;AAAA,EAgB7D,YACI,OACmB,IACA,eACA,UACrB;AACE,UAAM,OAAO;AAJM;AACA;AACA;AAInB,UAAM,cAAc,KAAK;AAEzB,SAAK,SAAS,IAAI,qBAAO,MAAM,UAAU;AAIzC,SAAK,UACD,cAAc,WAAW,UAAa,cAAc,OAAO,SAAS,IAC9D,2BAAQ,CAAC,cAAc,WACvB;AAEV,UAAM,cACF,cAAc,gBAAgB,UAAa,cAAc,gBAAgB,KACnE,IAAI,YAAY,mBAAmB,MAAM,eAAe,cAAc,eACtE;AAEV,QAAI,KAAK,YAAY,UAAa,gBAAgB,QAAW;AACzD,YAAM,IAAI,qBACN,iDAAiD;AAAA,uFAEjD;AAAA;AAIR,UAAM,uBAAuB;AAAA,MACzB;AAAA,QACI,UAAU,KAAK;AAAA,QACf,WAAW,wCAAkB;AAAA;AAAA;AAIrC,SAAK,eAAe,IAAI,mCAAa,MAAM,OAAO;AAAA,MAC9C,SAAS,GAAG,SAAS,aAAa;AAAA,MAElC,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,QAEb,QAAQ,IAAI,uCAAS,KAAK;AAAA,QAC1B,gBAAgB,qCAAe;AAAA,QAG/B,aAAa,kCAAY;AAAA,QACzB,sBAAsB,2CAAqB;AAAA,QAC3C;AAAA;AAAA,MAEJ,gBAAgB,CAAC,KAAK;AAAA,MAEtB,aAAa,kCAAY;AAAA,MACzB;AAAA,MACA,aAAa,KAAK;AAAA;AAItB,SAAK,mBAAmB,IAAI,8BAAU,MAAM,cAAc;AAAA,MACtD,aAAa;AAAA,MACb,OAAO,KAAK,OAAO;AAAA;AAEvB,QAAI,gBAAwB,KAAK,aAAa;AAC9C,QAAI,KAAK,YAAY,QAAW;AAE5B,sBAAgB,KAAK,QAAQ;AAAA;AAEjC,SAAK,eAAe,IAAI,8BAAU,MAAM,UAAU;AAAA,MAC9C,aAAa;AAAA,MACb,OAAO;AAAA;AAEX,SAAK,cAAc,IAAI,8BAAU,MAAM,mBAAmB;AAAA,MACtD,aAAa;AAAA,MACb,OAAO,KAAK,aAAa;AAAA;AAE7B,SAAK,uBAAuB,IAAI,8BAAU,MAAM,kBAAkB;AAAA,MAC9D,aAAa;AAAA,MACb,OAAO,KAAK,aAAa;AAAA;AAAA;AAAA,EAIjC,YAAqC;AACjC,WAAO;AAAA,MACH,OAAO,KAAK,aAAa;AAAA;AAAA;AAAA,EAIjC,UAA6D;AACzD,WAAO;AAAA,MACH,KAAK,MAAM,KAAK;AAAA,MAChB,OAAO,MAAM,KAAK;AAAA;AAAA;AAAA,EAI1B,SAAsC;AAClC,WAAO;AAAA,MACH,cAAc,KAAK,aAAa,KAAK;AAAA,MACrC,QAAQ,KAAK,OAAO,KAAK;AAAA;AAAA;AAAA,QAI3B,aAA4B;AAC9B,UAAM,KAAK;AAAA;AAAA,QAGT,uBAAsC;AACxC,kCAAW,IAAI,iCAAiC,KAAK;AAErD,UAAM,kBAAkB,MAAM,KAAK;AAEnC,UAAM,SAAS,MAAM,KAAK;AAC1B,QAAI,WAAW,QAAW;AACtB,oCAAW;AACX,oCAAW,IAAI,QAAQ,oBAAoB,UAAU,qBAAM,KAAK,IAAI;AAAA;AAAA;AAAA,QAI9D,gBAAiC;AAC3C,UAAM,aAAa,MAAM,KAAK;AAC9B,QAAI,eAAe,QAAW;AAC1B,YAAM,IAAI,qBACN,qDAAqD,KAAK,iEAC1D;AAAA;AAIR,UAAM,WAAW,8BAAW;AAC5B,QAAI;AACJ,QAAI,UAAU;AACV,uBAAiB,SAAS,OAAO;AAAA,QAC7B,SAAS,wBAAwB,KAAK,cAAc,oBAAoB;AAAA;AAE5E,oCAAW,IAAI,QAAQ,wBAAwB,KAAK,cAAc,oBAAoB;AAAA,WACnF;AACH,oCAAW,IAAI,wBAAwB,KAAK,cAAc,oBAAoB;AAAA;AAElF,UAAM,EAAE,YAAY,oBAAoB,MAAM,2BAAO;AAAA,MACjD,KAAK,KAAK;AAAA,MACV,WAAW,KAAK,cAAc;AAAA,MAC9B;AAAA;AAEJ,QAAI,YAAY;AACZ,UAAI,gBAAgB;AAChB,uBAAe,OAAO;AAAA,aACnB;AACH,sCAAW,IAAI;AAAA;AAEnB,YAAM,KAAK;AAAA;AAGf,QAAI,gBAAgB;AAChB,qBAAe;AAAA;AAGnB,WAAO;AAAA;AAAA,QAGG,gBAA+B;AACzC,UAAM,iBAAiB,MAAM,KAAK;AAClC,QAAI,mBAAmB,QAAW;AAC9B;AAAA;AAEJ,UAAM,0CAA0B,KAAK,UAAU;AAAA;AAAA,QAG7C,YAA2B;AAC7B,UAAM,aAAa,MAAM,KAAK;AAC9B,QAAI,eAAe,QAAW;AAE1B;AAAA;AAGJ,kCAAW,IACP,uBAAuB,wBAAwB,KAAK;AAExD,UAAM,4BAAY,KAAK,UAAU;AAAA;AAAA,QAG/B,SAAsC;AACxC,UAAM,SAAS,MAAM,KAAK;AAC1B,QAAI,WAAW,QAAW;AACtB,aAAO;AAAA;AAGX,WAAO,WAAW;AAAA;AAAA,QAGhB,gBAA6C;AAC/C,WAAO,KAAK,SAAS,eAAe,KAAK;AAAA;AAAA,QAGvC,YAAyC;AAC3C,WAAO,KAAK,SAAS,eAAe,KAAK;AAAA;AAAA,QAGvC,WAAwC;AAC1C,WAAO,KAAK,SAAS,eAAe,KAAK;AAAA;AAAA,QAGvC,oBAAiD;AACnD,WAAO,KAAK,SAAS,eAAe,KAAK;AAAA;AAAA,EAG7C,YAAgC;AAC5B,QAAI,KAAK,cAAc,cAAc,QAAW;AAC5C,UAAI,YAAY,KAAK,cAAc;AACnC,UAAI,UAAU,WAAW,SAAS,UAAU,WAAW,QAAQ;AAC3D,cAAM,IAAI,qBACN,kCAAkC,KAAK,uFAEvC;AAAA;AAGR,UAAI,CAAC,UAAU,WAAW,MAAM;AAC5B,oBAAY,IAAI;AAAA;AAGpB,aAAO;AAAA;AAAA;AAAA,EAIP,gBAA+B;AACnC,UAAM,YAAY,KAAK;AAGvB,QAAI,cAAc,QAAW;AACzB,aAAO;AAAA,QACH,YAAY;AAAA,QACZ,KAAK,4BAAS,QAAQ;AAAA,QACtB,oBAAoB;AAAA,QACpB,kBAAkB;AAAA;AAAA;AAQ1B,WAAO;AAAA,MACH,YAAY;AAAA,MACZ,KAAK,4BAAS,QAAQ;AAAA,MACtB,oBAAoB;AAAA,MACpB,kBAAkB;AAAA;AAAA;AAAA,EAIlB,yBAA8C;AAtU1D;AAuUQ,UAAM,kBAAqD;AAAA,MACvD,mBAAmB,EAAE,OAAO;AAAA,MAC5B,0BAA0B,EAAE,OAAO;AAAA,MACnC,oBAAoB,EAAE,OAAO;AAAA,MAC7B,6BAA6B,EAAE,OAAO;AAAA;AAE1C,QAAI,YAAK,cAAc,aAAnB,mBAA6B,iBAAgB,MAAM;AACnD,aAAO,gBAAgB;AAAA;AAE3B,UAAM,cAAc,KAAK,UAAU,iBAAiB,QAAW;AAI/D,UAAM,OAAO;AAAA;AAAA,2CAEsB;AAAA;AAAA;AAInC,UAAM,eAAe,uCACjB,GAAG,KAAK,SAAS,aAAa,KAAK,SAAS,UAAU,KAAK,eAC3D;AAGJ,WAAO,IAAI,WAAW,SAAS,MAAM,oBAAoB;AAAA,MACrD;AAAA,MACA,MAAM,WAAW,aAAa,WAAW;AAAA;AAAA;AAAA,EAIjD,iBAA8B;AAC1B,WAAO;AAAA,MAEH,eAAe,iCAAc;AAAA;AAAA;AAAA;AA3SlC;AACW,AADX,sBACW,WAA8B;AAAA,EACxC,QAAQ;AAAA,IACJ,OAAO;AAAA,IACP,SAAS,uBAAsB,UAAU;AAAA;AAAA;",
  "names": []
}
