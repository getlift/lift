{
  "version": 3,
  "sources": ["../../../../src/constructs/aws/Vpc.ts"],
  "sourcesContent": ["import { Vpc as CdkVpc, Peer, Port, SecurityGroup } from \"aws-cdk-lib/aws-ec2\";\nimport type { Construct as CdkConstruct } from \"constructs\";\nimport type { FromSchema } from \"json-schema-to-ts\";\nimport type { AwsProvider } from \"@lift/providers\";\nimport type { ConstructInterface } from \"@lift/constructs\";\n\nconst VPC_DEFINITION = {\n    type: \"object\",\n    properties: {\n        type: { const: \"vpc\" },\n    },\n    additionalProperties: false,\n    required: [],\n} as const;\n\ntype Configuration = FromSchema<typeof VPC_DEFINITION>;\n\nexport class Vpc extends CdkVpc implements ConstructInterface {\n    public static type = \"vpc\";\n    public static schema = VPC_DEFINITION;\n\n    static create(provider: AwsProvider, id: string, configuration: Configuration): Vpc {\n        return new this(provider.stack, id, configuration, provider);\n    }\n\n    private readonly appSecurityGroup: SecurityGroup;\n\n    constructor(scope: CdkConstruct, id: string, configuration: Configuration, private provider: AwsProvider) {\n        super(scope, id, {\n            maxAzs: 2,\n        });\n\n        // Add a security group for the Lambda functions\n        this.appSecurityGroup = new SecurityGroup(this, \"AppSecurityGroup\", {\n            vpc: this,\n        });\n        // Lambda is allowed to reach out to the whole internet\n        this.appSecurityGroup.addEgressRule(Peer.anyIpv4(), Port.allTraffic());\n\n        // Auto-register the VPC\n        provider.setVpcConfig(\n            [this.appSecurityGroup.securityGroupId],\n            this.privateSubnets.map((subnet) => subnet.subnetId)\n        );\n    }\n\n    outputs(): Record<string, () => Promise<string | undefined>> {\n        return {};\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,qBAAyD;AAMzD,MAAM,iBAAiB;AAAA,EACnB,MAAM;AAAA,EACN,YAAY;AAAA,IACR,MAAM,EAAE,OAAO;AAAA;AAAA,EAEnB,sBAAsB;AAAA,EACtB,UAAU;AAAA;AAKP,kBAAkB,mBAAqC;AAAA,EAU1D,YAAY,OAAqB,IAAY,eAAsC,UAAuB;AACtG,UAAM,OAAO,IAAI;AAAA,MACb,QAAQ;AAAA;AAFmE;AAM/E,SAAK,mBAAmB,IAAI,6BAAc,MAAM,oBAAoB;AAAA,MAChE,KAAK;AAAA;AAGT,SAAK,iBAAiB,cAAc,oBAAK,WAAW,oBAAK;AAGzD,aAAS,aACL,CAAC,KAAK,iBAAiB,kBACvB,KAAK,eAAe,IAAI,CAAC,WAAW,OAAO;AAAA;AAAA,SArB5C,OAAO,UAAuB,IAAY,eAAmC;AAChF,WAAO,IAAI,KAAK,SAAS,OAAO,IAAI,eAAe;AAAA;AAAA,EAwBvD,UAA6D;AACzD,WAAO;AAAA;AAAA;AA7BG,AADX,IACW,OAAO;AACP,AAFX,IAEW,SAAS;",
  "names": []
}
