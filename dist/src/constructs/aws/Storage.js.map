{
  "version": 3,
  "sources": ["../../../../src/constructs/aws/Storage.ts"],
  "sourcesContent": ["import type { CfnBucket } from \"aws-cdk-lib/aws-s3\";\nimport { BlockPublicAccess, Bucket, BucketEncryption, StorageClass } from \"aws-cdk-lib/aws-s3\";\nimport type { Construct as CdkConstruct } from \"constructs\";\nimport { CfnOutput, Duration, Fn, Stack } from \"aws-cdk-lib\";\nimport type { CfnResource } from \"aws-cdk-lib\";\nimport type { FromSchema } from \"json-schema-to-ts\";\nimport type { AwsProvider } from \"@lift/providers\";\nimport { AwsConstruct } from \"@lift/constructs/abstracts\";\nimport { PolicyStatement } from \"../../CloudFormation\";\n\nconst STORAGE_DEFINITION = {\n    type: \"object\",\n    properties: {\n        type: { const: \"storage\" },\n        archive: { type: \"number\", minimum: 30 },\n        encryption: {\n            anyOf: [{ const: \"s3\" }, { const: \"kms\" }],\n        },\n    },\n    additionalProperties: false,\n} as const;\nconst STORAGE_DEFAULTS: Required<FromSchema<typeof STORAGE_DEFINITION>> = {\n    type: \"storage\",\n    archive: 45,\n    encryption: \"s3\",\n};\n\ntype Configuration = FromSchema<typeof STORAGE_DEFINITION>;\n\nexport class Storage extends AwsConstruct {\n    public static type = \"storage\";\n    public static schema = STORAGE_DEFINITION;\n\n    private readonly bucket: Bucket;\n    // a remplacer par StorageExtensionsKeys\n    private readonly bucketNameOutput: CfnOutput;\n\n    constructor(scope: CdkConstruct, id: string, configuration: Configuration, private provider: AwsProvider) {\n        super(scope, id);\n\n        const resolvedConfiguration = Object.assign({}, STORAGE_DEFAULTS, configuration);\n\n        const encryptionOptions = {\n            s3: BucketEncryption.S3_MANAGED,\n            kms: BucketEncryption.KMS_MANAGED,\n        };\n\n        this.bucket = new Bucket(this, \"Bucket\", {\n            encryption: encryptionOptions[resolvedConfiguration.encryption],\n            versioned: true,\n            blockPublicAccess: BlockPublicAccess.BLOCK_ALL,\n            enforceSSL: true,\n            lifecycleRules: [\n                {\n                    transitions: [\n                        {\n                            storageClass: StorageClass.INTELLIGENT_TIERING,\n                            transitionAfter: Duration.days(0),\n                        },\n                    ],\n                },\n                {\n                    noncurrentVersionExpiration: Duration.days(30),\n                },\n            ],\n        });\n\n        this.bucketNameOutput = new CfnOutput(this, \"BucketName\", {\n            value: this.bucket.bucketName,\n        });\n    }\n\n    variables(): Record<string, unknown> {\n        return {\n            bucketArn: this.bucket.bucketArn,\n            bucketName: this.bucket.bucketName,\n        };\n    }\n\n    permissions(): PolicyStatement[] {\n        return [\n            new PolicyStatement(\n                [\"s3:PutObject\", \"s3:GetObject\", \"s3:DeleteObject\", \"s3:ListBucket\"],\n                [this.bucket.bucketArn, Stack.of(this).resolve(Fn.join(\"/\", [this.bucket.bucketArn, \"*\"]))]\n            ),\n        ];\n    }\n\n    outputs(): Record<string, () => Promise<string | undefined>> {\n        return {\n            bucketName: () => this.getBucketName(),\n        };\n    }\n\n    extend(): Record<string, CfnResource> {\n        return {\n            bucket: this.bucket.node.defaultChild as CfnBucket,\n        };\n    }\n\n    async getBucketName(): Promise<string | undefined> {\n        return this.provider.getStackOutput(this.bucketNameOutput);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,oBAA0E;AAE1E,yBAA+C;AAI/C,uBAA6B;AAC7B,4BAAgC;AAEhC,MAAM,qBAAqB;AAAA,EACvB,MAAM;AAAA,EACN,YAAY;AAAA,IACR,MAAM,EAAE,OAAO;AAAA,IACf,SAAS,EAAE,MAAM,UAAU,SAAS;AAAA,IACpC,YAAY;AAAA,MACR,OAAO,CAAC,EAAE,OAAO,QAAQ,EAAE,OAAO;AAAA;AAAA;AAAA,EAG1C,sBAAsB;AAAA;AAE1B,MAAM,mBAAoE;AAAA,EACtE,MAAM;AAAA,EACN,SAAS;AAAA,EACT,YAAY;AAAA;AAKT,sBAAsB,8BAAa;AAAA,EAQtC,YAAY,OAAqB,IAAY,eAAsC,UAAuB;AACtG,UAAM,OAAO;AADkE;AAG/E,UAAM,wBAAwB,OAAO,OAAO,IAAI,kBAAkB;AAElE,UAAM,oBAAoB;AAAA,MACtB,IAAI,+BAAiB;AAAA,MACrB,KAAK,+BAAiB;AAAA;AAG1B,SAAK,SAAS,IAAI,qBAAO,MAAM,UAAU;AAAA,MACrC,YAAY,kBAAkB,sBAAsB;AAAA,MACpD,WAAW;AAAA,MACX,mBAAmB,gCAAkB;AAAA,MACrC,YAAY;AAAA,MACZ,gBAAgB;AAAA,QACZ;AAAA,UACI,aAAa;AAAA,YACT;AAAA,cACI,cAAc,2BAAa;AAAA,cAC3B,iBAAiB,4BAAS,KAAK;AAAA;AAAA;AAAA;AAAA,QAI3C;AAAA,UACI,6BAA6B,4BAAS,KAAK;AAAA;AAAA;AAAA;AAKvD,SAAK,mBAAmB,IAAI,6BAAU,MAAM,cAAc;AAAA,MACtD,OAAO,KAAK,OAAO;AAAA;AAAA;AAAA,EAI3B,YAAqC;AACjC,WAAO;AAAA,MACH,WAAW,KAAK,OAAO;AAAA,MACvB,YAAY,KAAK,OAAO;AAAA;AAAA;AAAA,EAIhC,cAAiC;AAC7B,WAAO;AAAA,MACH,IAAI,sCACA,CAAC,gBAAgB,gBAAgB,mBAAmB,kBACpD,CAAC,KAAK,OAAO,WAAW,yBAAM,GAAG,MAAM,QAAQ,sBAAG,KAAK,KAAK,CAAC,KAAK,OAAO,WAAW;AAAA;AAAA;AAAA,EAKhG,UAA6D;AACzD,WAAO;AAAA,MACH,YAAY,MAAM,KAAK;AAAA;AAAA;AAAA,EAI/B,SAAsC;AAClC,WAAO;AAAA,MACH,QAAQ,KAAK,OAAO,KAAK;AAAA;AAAA;AAAA,QAI3B,gBAA6C;AAC/C,WAAO,KAAK,SAAS,eAAe,KAAK;AAAA;AAAA;AAvE/B,AADX,QACW,OAAO;AACP,AAFX,QAEW,SAAS;",
  "names": []
}
